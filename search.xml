<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java面向对象1</title>
      <link href="/posts/24752.html"/>
      <url>/posts/24752.html</url>
      
        <content type="html"><![CDATA[<h1 id="五、面向对象（上）"><a href="#五、面向对象（上）" class="headerlink" title="五、面向对象（上）"></a>五、面向对象（上）</h1><h2 id="1-Java面向对象学习的三条路径"><a href="#1-Java面向对象学习的三条路径" class="headerlink" title="1. Java面向对象学习的三条路径"></a>1. Java面向对象学习的三条路径</h2><p>**1. Java类及类的成员：<br>属性、方法、构造器；代码块、内部类；</p><ol start="2"><li><p>面向对象的三大特征<br>封装性、继承性、多态性、(抽象性)；</p></li><li><p>其它关键字<br>this、super、static、final、abstract、interface、import、package</p></li></ol><p>大处着眼，小处着手。**</p><h2 id="2-面向过程和面向对象"><a href="#2-面向过程和面向对象" class="headerlink" title="2. 面向过程和面向对象"></a>2. 面向过程和面向对象</h2><p>**面向过程(POP) 与 面向对象(OOP)</p><ol><li>二者都是一种思想，面向对象是相对于面向过程而言的。</li></ol><p>面向过程，强调的是功能行为，以函数为最小单位，考虑怎么做。<br>面向对象，将功能封装进对象，强调具备了功能的对象，以类/对象为最小单位，考虑谁来做。</p><ol start="2"><li>面向对象更加强调运用人类在日常的思维逻辑中采用的思想方法与原则，如<br>抽象、分类、继承、聚合、多态等**</li></ol><h3 id="2-1-面向过程和面向对象的例子对比"><a href="#2-1-面向过程和面向对象的例子对比" class="headerlink" title="2.1 面向过程和面向对象的例子对比"></a>2.1 面向过程和面向对象的例子对比</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//人把大象装进冰箱</span><span class="token comment">//面向过程</span><span class="token number">1.</span>把冰箱门打开<span class="token number">2.</span>抬起大象<span class="token punctuation">,</span>放进冰箱<span class="token number">3.</span>关闭冰箱门<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//面向对象</span>人<span class="token punctuation">{</span><span class="token comment">//打开(冰箱){</span>冰箱<span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//抬起(大象){</span>大象<span class="token punctuation">.</span><span class="token function">setin</span><span class="token punctuation">(</span>冰箱<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//关闭(冰箱){</span>冰箱<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>冰箱<span class="token punctuation">{</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span>大象<span class="token punctuation">{</span><span class="token function">setin</span><span class="token punctuation">(</span>冰箱<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>程序员从面向过程的执行者转化成了面向对象的指挥者</strong></p></blockquote><p>**面向对象分析方法分析问题的思路和步骤：</p><ol><li>根据问题需要选择问题所针对的现实世界中的实体。</li><li>从实体中寻找解决问题相关的属性和功能，这些属性和功能就形成了概念世界中的类。</li><li>把抽象的实体用计算机语言进行描述，形成计算机世界中类的定义。即借助某种程序<br>语言，把类构造成计算机能够识别和处理的数据结构。</li><li>将类实例化成计算机世界中的对象。对象是计算机世界中解决问题的最终工具。**</li></ol><p><strong>实体&gt;(抽象)&gt;属性、功能&gt;(计算机语言描述)&gt;类&gt;(实例化类)&gt;对象</strong></p><h2 id="3-类和对象思想"><a href="#3-类和对象思想" class="headerlink" title="3.类和对象思想"></a>3.类和对象思想</h2><h3 id="3-1-思想概述"><a href="#3-1-思想概述" class="headerlink" title="3.1 思想概述"></a>3.1 思想概述</h3><p>**类(Class)和对象(Object)是面向对象的核心概念。</p><ol><li>类是对一类事物的描述，是抽象的、概念上的定义。</li><li>对象是实际存在的该类事物的每个个体，因而也称为实例(instance)。**</li></ol><p><strong>面向对象程序设计的重点是类的设计<br>类的设计就是类的成员的设计。</strong></p><blockquote><p><strong>人是一个类，具体的某个人是一个对象</strong></p></blockquote><h3 id="3-2-类属性、方法的概念"><a href="#3-2-类属性、方法的概念" class="headerlink" title="3.2 类属性、方法的概念"></a>3.2 类属性、方法的概念</h3><p><img src="https://yancey597.github.io/posts/24752/1.jpg"></p><p>**Field = 属性 = 成员变量 = 域、字段<br>Method = 成员方法 = 函数</p><p>创建类对象 = 实例化类**</p><blockquote><p><strong>生活中描述事物无非就是描述事物的属性和行为。<br>如:人有身高，体重等属性，有说话，打球等行为。</strong></p></blockquote><h3 id="3-3-类和对象的使用-面向对象思想落地的实现"><a href="#3-3-类和对象的使用-面向对象思想落地的实现" class="headerlink" title="3.3 类和对象的使用(面向对象思想落地的实现)"></a>3.3 类和对象的使用(面向对象思想落地的实现)</h3><p><strong>1.创建类：设计类的成员。<br>2.创建类的对象。<br>3.通过”对象名.属性”或“对象名.方法”调用对象的结构。</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">*</span><span class="token operator">*</span>修饰符 <span class="token keyword">class</span> 类名 <span class="token punctuation">{</span>属性声明<span class="token punctuation">;</span>方法声明<span class="token punctuation">;</span><span class="token punctuation">}</span>说明：修饰符<span class="token keyword">public</span>：类可以被任意访问类的正文要用<span class="token punctuation">{</span> <span class="token punctuation">}</span>括起来<span class="token operator">*</span><span class="token operator">*</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//类的实例化</span><span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用类的属性、方法</span><span class="token comment">//调用属性："对象名.属性"</span>p1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Yancey"</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token comment">//调用方法："对象名.方法"</span>p1<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span><span class="token function">talk</span><span class="token punctuation">(</span><span class="token string">"Chinese"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token comment">//属性</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">boolean</span> isMan<span class="token punctuation">;</span><span class="token comment">//方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人可以吃饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人可以睡觉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">talk</span><span class="token punctuation">(</span><span class="token class-name">String</span> language<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人可以说话,使用的是"</span> <span class="token operator">+</span> language<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-类的多个对象"><a href="#3-4-类的多个对象" class="headerlink" title="3.4 类的多个对象"></a>3.4 类的多个对象</h3><p><strong>如果创建了一个类的多个对象，则每个对象都独立的拥有一套类的属性(非static)。</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Yancey"</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>p2 <span class="token operator">=</span> p1<span class="token punctuation">;</span><span class="token comment">//地址！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-5-对象的内存解析"><a href="#3-5-对象的内存解析" class="headerlink" title="3.5 对象的内存解析"></a>3.5 对象的内存解析</h3><p><img src="https://yancey597.github.io/posts/24752/2.jpg"></p><p><img src="https://yancey597.github.io/posts/24752/3.jpg"></p><p><strong>虚拟机栈： 俗称的栈，局部变量放在栈中。</strong></p><p><strong>堆：</strong>我们将<strong>new出来的结构</strong>(比如:数组、对象)加载在堆空间中。补充**:对象的属性**(非static的)加载在堆空间中。</p><p><strong>方法区：</strong>类的加载信息、常量池、静态域。</p><h3 id="3-6-理解万事万物皆对象"><a href="#3-6-理解万事万物皆对象" class="headerlink" title="3.6 理解万事万物皆对象"></a>3.6 理解万事万物皆对象</h3><ol><li><strong>在Java语言范畴中，我们都将功能、结构等封装到类中，通过类的实例化，来调用具体的功能结构。</strong><blockquote><p>Scanner ,String等<br>文件:File<br>网络资源:URL</p></blockquote></li><li><strong>涉及到Java语言与前端Html、后端的数据库交互时，前后端的结构在Java层面交互时，都体现为类、对象。</strong></li></ol><h3 id="3-7-匿名对象"><a href="#3-7-匿名对象" class="headerlink" title="3.7 匿名对象"></a>3.7 匿名对象</h3><p>1.理解：我们创建的对象，没有显式的赋给一个变量名。即为匿名对象</p><p>2.特征：匿名对象只能调用一次。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnonymousObject</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">StudentFactory</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StudentFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">showEat</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//匿名对象的使用</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">StudentFactory</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showEat</span><span class="token punctuation">(</span><span class="token class-name">Student</span> stu<span class="token punctuation">)</span> <span class="token punctuation">{</span>stu<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用student类的方法</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学生会吃饭！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-成员变量-属性-和局部变量的对比"><a href="#4-成员变量-属性-和局部变量的对比" class="headerlink" title="4. 成员变量(属性)和局部变量的对比"></a>4. 成员变量(属性)和局部变量的对比</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> user<span class="token punctuation">{</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token comment">//属性(成员变量)</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">boolean</span> isMale<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">talk</span><span class="token punctuation">(</span><span class="token class-name">String</span> language<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//形参</span><span class="token class-name">String</span> abc <span class="token operator">=</span> <span class="token string">"OK"</span><span class="token punctuation">;</span><span class="token comment">//局部变量</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这个人说"</span> <span class="token operator">+</span> language<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>相同点：</strong></p><ol><li><strong>定义变量的格式：数据类型变量名 = 变量值</strong></li><li><strong>先声明，后使用</strong></li><li><strong>变量都有其对应的作用域</strong></li></ol><p><strong>不同点：</strong></p><ol><li><p><strong>在类中声明的位置不同</strong></p><p> <strong>成员变量：直接声明在类的{}内的变量</strong></p><p> <strong>局部变量：声明在方法内、方法形参、代码块内、构造器形参、构造器内部的变量</strong></p></li><li><p><strong>关于权限修饰符的不同<br>属性：可以在声明属性时，指明其权限，使用权限修饰符<br>常用的权限修饰符：private、 public、缺省、protected<br>局部变量：不能用权限修饰符(除了final，方法的权限即为局部变量的权限)</strong></p></li><li><p><strong>默认初始化值不同<br>属性：类的属性，根据其类型，都有默认初始化值<br>意味着，我们在调用局部变量之前，一定要显式赋值。<br>特别地：形参在调用时，我们赋值即可。</strong></p></li><li><p><strong>在内存中加载位置不同<br>属性：加载在堆空间中(非static)<br>局部变量：加载在栈空间</strong></p></li></ol><p><img src="https://yancey597.github.io/posts/24752/4.jpg"></p><h2 id="4-类中方法的声明、使用"><a href="#4-类中方法的声明、使用" class="headerlink" title="4. 类中方法的声明、使用"></a>4. 类中方法的声明、使用</h2><blockquote><p><strong>方法：描述类应该具有的功能。<br>比如：Math类：sqrt()、random()<br>Scanner类：nextXxx() …<br>Arrays类：sort()、binarySearch()、toString()、equals() …</strong></p></blockquote><h3 id="4-1-方法的声明："><a href="#4-1-方法的声明：" class="headerlink" title="4.1 方法的声明："></a>4.1 方法的声明：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">*</span><span class="token operator">*</span>权限修饰符 返回值类型 方法名<span class="token punctuation">(</span>形参列表<span class="token punctuation">)</span><span class="token punctuation">{</span>方法体<span class="token punctuation">}</span><span class="token number">1.</span> 权限修饰符：默认方法的权限修饰符先都使用<span class="token keyword">public</span><span class="token class-name">Java</span>规定的<span class="token number">4</span>种权限修饰符：<span class="token keyword">private</span>、<span class="token keyword">public</span>、缺省、<span class="token keyword">protected</span><span class="token number">2.</span> 返回值类型： 有返回值  vs 没有返回值如果方法有返回值，则必须在方法声明时，指定返回值的类型。方法中需要使用<span class="token keyword">return</span>关键字来返回指定类型的变量或常量：“<span class="token keyword">return</span> 数据”。如果方法没有返回值，则方法声明时，使用<span class="token keyword">void</span>来表示。通常，没有返回值的方法中，就不需要使用<span class="token keyword">return</span>。如果使用的话，只能“<span class="token keyword">return</span><span class="token punctuation">;</span>”表示结束此方法的意思。<span class="token number">3.</span> 方法名：属于标识符，遵循标识符的规则和规范，“见名知意”<span class="token operator">*</span><span class="token operator">*</span><span class="token number">4.</span> 形参列表： 方法可以声明<span class="token number">0</span>个，<span class="token number">1</span>个，或多个形参。格式：数据类型<span class="token number">1</span> 形参<span class="token number">1</span><span class="token punctuation">,</span>数据类型<span class="token number">2</span> 形参<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">5.</span>方法体：方法功能的体现。方法的使用中，可以调用当前类的属性或方法；特殊的：方法<span class="token class-name">A</span>中又调用了方法<span class="token class-name">A</span><span class="token operator">:</span>递归方法。方法中，不可以定义方法。<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>注意：<span class="token keyword">static</span>、<span class="token keyword">final</span>、<span class="token keyword">abstract</span> 来修饰的方法，后面再讲<span class="token operator">*</span><span class="token operator">*</span>。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-方法的重载"><a href="#4-2-方法的重载" class="headerlink" title="4.2 方法的重载"></a>4.2 方法的重载</h3><p>**重载的概念<br>在同一个类中，允许存在一个以上的同名方法，只要它们的参数个数或者参数<br>类型不同即可。</p><p>重载的特点：<br>与返回值类型无关，只看参数列表，且参数列表必须不同。(参数个数或参数类<br>型)。调用时，根据方法参数列表的不同来区别。**</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> overLoadTest<span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> sum <span class="token operator">=</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"两个数之和是"</span><span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">double</span> i<span class="token punctuation">,</span> <span class="token keyword">double</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">double</span> sum <span class="token operator">=</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The sum is "</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//方法的重载</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>通过对象调用方法时，如何确定执行指定的方法？</strong></p><p><strong>方法名 —&gt; 参数列表</strong></p><h3 id="4-3-可变参数的形参"><a href="#4-3-可变参数的形参" class="headerlink" title="4.3 可变参数的形参"></a>4.3 可变参数的形参</h3><p>**可变个数形参的格式：数据类型 … 变量名</p><p>当调用可变个数形参的方法时，传入的参数个数可以是：0个,1个,2个，。。。<br>可变个数形参的方法与本类中方法名相同，形参不同的方法之间构成重载<br>可变个数形参的方法与本类中方法名相同，形参类型也相同的数组之间不构成重载。换句话说，二者不能共存。<br>可变个数形参在方法的形参中，必须声明在末尾<br>可变个数形参在方法的形参中,最多只能声明一个可变形参。**</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OverLoadTest2</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">OverLoadTest2</span> printtest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OverLoadTest2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>printtest<span class="token punctuation">.</span><span class="token function">printTest</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printTest</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//**可变个数形参在方法的形参中，必须声明在末尾</span><span class="token comment">//可变个数形参在方法的形参中,最多只能声明一个可变形参。**</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> string<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-方法中的值传递机制"><a href="#4-4-方法中的值传递机制" class="headerlink" title="4.4 方法中的值传递机制"></a>4.4 方法中的值传递机制</h3><blockquote><p><strong>方法的形参的传递机制：值传递</strong></p></blockquote><p><strong>形参：</strong></p><p>方法定义时，声明的小括号内的参数 </p><p><strong>实参：</strong></p><p>方法调用时，实际传递给形参的数据</p><p><strong>值传递机制</strong>：</p><p><strong>如果参数是基本数据类型，此时实参赋给形参的是实参真实存储的数据值。</strong></p><p><strong>如果参数是引用数据类型，此时实参赋给形参的是实参存储数据的地址值。</strong></p><h3 id="4-5-递归"><a href="#4-5-递归" class="headerlink" title="4.5 递归"></a>4.5 递归</h3><h2 id="5-封装与隐藏"><a href="#5-封装与隐藏" class="headerlink" title="5 封装与隐藏"></a>5 封装与隐藏</h2><blockquote><p>为什么需要封装？封装的作用和含义？<br>我要用洗衣机，只需要按一下开关和洗涤模式就可以了。有必要了解洗衣机内部的结构吗？有必要碰电动机吗？</p></blockquote><p>程序设计追求“高内聚，低耦合”。</p><p>高内聚 ：类的内部数据操作细节自己完成，不允许外部干涉；<br>低耦合 ：仅对外暴露少量的方法用于使用。<br>隐藏对象内部的复杂性，只对外公开简单的接口。便于外界调用，从而提高系统的可扩展性、可维护性。通俗的说，把该隐藏的隐藏起来，该暴露的暴露出来。这就是封装性的设计思想。</p><blockquote><p>问题引入，属性封装性的体现：类的属性私有化，提供公共(Public)方法设置获取属性的值<br>拓展：封装性的体现：不对外暴露的私有方法，单例模式。<br>封装性的体现：需要权限修饰符的配合。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> legs<span class="token punctuation">;</span><span class="token comment">//private修饰符</span><span class="token comment">//对某些特定属性的设置</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLegs</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">)</span> <span class="token punctuation">{</span>legs <span class="token operator">=</span> l<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>legs<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span> legs <span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>legs <span class="token operator">=</span> l<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>legs <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//抛出一个异常，暂时没有讲</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//对属性的获取</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getLegs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> legs<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-1-权限修饰符"><a href="#5-1-权限修饰符" class="headerlink" title="5.1 权限修饰符"></a>5.1 权限修饰符</h3><p>Java规定的四种权限：从大到小<br>public、protected、缺省(default)、private。</p><p>可以修饰类及类的内部结构：属性、方法、构造器、内部类。</p><p>修饰类：只能是public、default。<br>总结封装性：Java提供了4种权限修饰符来修饰类及类的内部结构，体现类及类的内部结构在被调用时的可见性的大小。</p><p><img src="https://yancey597.github.io/posts/24752/Untitled 13.png"></p><p><img src="https://yancey597.github.io/posts/24752/Untitled 14.png"></p><h2 id="6-构造器、构造方法的使用"><a href="#6-构造器、构造方法的使用" class="headerlink" title="6 构造器、构造方法的使用"></a>6 构造器、构造方法的使用</h2><h3 id="6-1-构造器的作用："><a href="#6-1-构造器的作用：" class="headerlink" title="6.1 构造器的作用："></a>6.1 构造器的作用：</h3><p><strong>1.创建对象</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Person()....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>name <span class="token operator">=</span> n<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2.初始化对象的信息</strong></p><h3 id="6-2-说明："><a href="#6-2-说明：" class="headerlink" title="6.2 说明："></a>6.2 说明：</h3><p>1.如果没有显式的定义类的构造器的话，则系统默认提供一个空参的构造器<br>2.定义构造器的格式：权限修饰符  类名(形参列表){}<br>3.一个类中定义的多个构造器，彼此构成重载<br>4.一旦我们显式的定义了类的构造器之后，系统就不再提供默认的空参构造器<br>5.一个类中，至少会有一个构造器。</p><h3 id="6-3-属性赋值"><a href="#6-3-属性赋值" class="headerlink" title="6.3 属性赋值"></a>6.3 属性赋值</h3><p>总结：属性赋值的先后顺序</p><p>① 默认初始化<br>② 显式初始化<br>③ 构造器中初始化</p><p>④ 通过”对象.方法” 或 “对象.属性”的方式，赋值<br>以上操作的先后顺序：① - ② - ③ - ④</p><h3 id="6-4-拓展知识：Java-Bean"><a href="#6-4-拓展知识：Java-Bean" class="headerlink" title="6.4 拓展知识：Java Bean"></a>6.4 拓展知识：Java Bean</h3><p>类是公共的：<br>有一个无参的公共的构造器<br>有属性，且有对应的get，set方法</p><h3 id="6-5-UML图"><a href="#6-5-UML图" class="headerlink" title="6.5 UML图"></a>6.5 UML图</h3><p><img src="https://yancey597.github.io/posts/24752/Untitled 15.png"></p><h3 id="6-6-this-关键字"><a href="#6-6-this-关键字" class="headerlink" title="6.6 this 关键字"></a>6.6 this 关键字</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//空参构造器</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token comment">//当形参和类的属性名相同时需要用this关键字</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>this关键字的用途</li></ol><p>this关键字的使用：</p><p>1.this 可以用来修饰、调用：属性、方法、构造器<br>2.this修饰属性和方法：<br>this理解为：当前对象  或 当前正在创建的对象**</p><ol><li><strong>如何使用this关键字</strong></li></ol><p>2.1  在类的方法中，我们可以使用”this.属性”或”this.方法”的方式，调用当前对象属性或方法。但是，通常情况下，我们都选择省略”this.”。特殊情况下，如果方法的形参和类的属性同名时，我们必须显式的使用”this.变量”的方式，表明此变量是属性，而非形参。</p><p>2.2 在类的构造器中，我们可以使用”this.属性”或”this.方法”的方式，调用当前正在创建的对象属性或方法。但是，通常情况下，我们都选择省略”this.”。特殊情况下，如果构造器的形参和类的属性同名时，我们必须显式的使用”this.变量”的方式，表明此变量是属性，而非形参。</p><ol><li><strong>this调用构造器</strong></li></ol><p>① 在类的构造器中，可以显式的使用”this(形参列表)”方式调用本类中指定的其他构造器<br>② 构造器中不能通过”this(形参列表)”方式调用自己<br>③ 如果一个类中有n个构造器，则最多有 n - 1构造器中使用了”this(形参列表)”<br>④ 规定：”this(形参列表)”必须声明在当前构造器的首行<br>⑤ 构造器内部，最多只能声明一个”this(形参列表)”，用来调用其他的构造器</p><h3 id="6-7-MVC设计模式"><a href="#6-7-MVC设计模式" class="headerlink" title="6.7 MVC设计模式"></a>6.7 MVC设计模式</h3><p><img src="https://yancey597.github.io/posts/24752/Untitled 16.png"></p><p><img src="https://yancey597.github.io/posts/24752/Untitled 17.png"></p><h3 id="6-8-JDK常用包"><a href="#6-8-JDK常用包" class="headerlink" title="6.8 JDK常用包"></a>6.8 JDK常用包</h3><p><img src="https://yancey597.github.io/posts/24752/Untitled 18.png"></p><h3 id="6-9-Package-关键字"><a href="#6-9-Package-关键字" class="headerlink" title="6.9 Package 关键字"></a>6.9 Package 关键字</h3><p>package关键字的使用</p><ol><li>为了更好的实现项目中类的管理，提供包的概念</li><li>使用package声明类或接口所属的包，声明在源文件的首行</li><li>包，属于标识符，遵循标识符的命名规则、规范(xxxyyyzzz)、“见名知意”</li><li>每”.”一次，就代表一层文件目录。</li></ol><p>补充：同一个包下，不能命名同名的接口、类。<br>不同的包下，可以命名同名的接口、类。**</p><h3 id="6-10-import关键字的使用"><a href="#6-10-import关键字的使用" class="headerlink" title="6.10 import关键字的使用"></a>6.10 import关键字的使用</h3><p>import：导入**</p><ol><li><p>**在源文件中显式的使用import结构导入指定包下的类、接口</p></li><li><p>声明在包的声明和类的声明之间</p></li><li><p>如果需要导入多个结构，则并列写出即可</p></li><li><p>可以使用”xxx.”的方式，表示可以导入xxx包下的所有结构</p></li><li><p>如果使用的类或接口是java.lang包下定义的，则可以省略import结构</p></li><li><p>如果使用的类或接口是本包下定义的，则可以省略import结构</p></li><li><p>如果在源文件中，使用了不同包下的同名的类，则必须至少有一个类需要以全类名的方式显示。</p></li><li><p>使用”xxx.”方式表明可以调用xxx包下的所有结构。但是如果使用的是xxx子包下的结构，则仍需要显式导入</p></li></ol><p>import static：导入指定类或接口中的静态结构：属性或方法。**</p><h2 id="7-继承性"><a href="#7-继承性" class="headerlink" title="7. 继承性"></a>7. 继承性</h2><blockquote><p><strong>面向对象的特征之二：继承性    why?<br>extends：延展、扩展</strong></p></blockquote><h3 id="7-1-继承性的好处："><a href="#7-1-继承性的好处：" class="headerlink" title="7.1 继承性的好处："></a>7.1 继承性的好处：</h3><p>① 减少了代码的冗余，提高了代码的复用性<br>② 便于功能的扩展<br>③ 为之后多态性的使用，提供了前提**</p><h3 id="7-2-继承性的格式"><a href="#7-2-继承性的格式" class="headerlink" title="7.2 继承性的格式"></a>7.2 继承性的格式</h3><p>class A extends B{<br>}<br>A:子类、派生类、subclass<br>B:父类、超类、基类、superclass</p><p>体现：一旦子类A继承父类B以后，子类A中就获取了父类B中声明的所有的属性和方法。</p><pre><code> 特别的，父类中声明为private的属性或方法，子类继承父类以后，仍然认为获取了父类中私有的结构。因为封装性的影响，使得子类不能直接调用父类的结构而已。     子类继承父类以后，还可以声明自己特有的属性或方法：实现功能的拓展。</code></pre><p>子类和父类的关系，不同于子集和集合的关系。**</p><h3 id="7-3-继承性的规定"><a href="#7-3-继承性的规定" class="headerlink" title="7.3 继承性的规定"></a>7.3 继承性的规定</h3><ol><li>一个类可以被多个子类继承。</li><li>Java中类的单继承性：一个类只能有一个父类</li><li>子父类是相对的概念。</li><li>子类直接继承的父类，称为：直接父类。间接继承的父类称为：间接父类</li><li>子类继承父类以后，就获取了直接父类以及所有间接父类中声明的属性和方法**</li></ol><p><img src="https://yancey597.github.io/posts/24752/Untitled 19.png"></p><h3 id="7-4-Object-类"><a href="#7-4-Object-类" class="headerlink" title="7.4 Object 类"></a>7.4 Object 类</h3><p>如果我们没有显式的声明一个类的父类的话，则此类继承于java.lang.Object类<br>所有的java类（除java.lang.Object类之外）都直接或间接的继承于java.lang.Object类<br>意味着，所有的java类具有java.lang.Object类声明的功能。**</p><h2 id="8-方法的重写"><a href="#8-方法的重写" class="headerlink" title="8. 方法的重写"></a>8. 方法的重写</h2><h3 id="8-1-概念"><a href="#8-1-概念" class="headerlink" title="8.1 概念"></a>8.1 概念</h3><p>子类继承父类以后，可以对父类中同名同参数的方法，进行覆盖操作**</p><h3 id="8-2-应用"><a href="#8-2-应用" class="headerlink" title="8.2 应用"></a>8.2 应用</h3><p>重写以后，当创建子类对象以后，通过子类对象调用子父类中的同名同参数的方法时，实际执行的是子类重写父类的方法。**</p><h3 id="8-3重写的规定"><a href="#8-3重写的规定" class="headerlink" title="8.3重写的规定"></a><strong>8.3重写的规定</strong></h3><p>方法的声明： </p><p>权限修饰符 返回值类型 方法名(形参列表) throws 异常的类型{<br>//方法体<br>}</p><p>约定俗称：子类中的叫重写的方法，父类中的叫被重写的方法<br>① 子类重写的方法的方法名和形参列表与父类被重写的方法的方法名和形参列表相同<br>② 子类重写的方法的权限修饰符不小于父类被重写的方法的权限修饰符</p><p>特殊情况：子类不能重写父类中声明为private权限的方法</p><p>③ 返回值类型：<br>父类被重写的方法的返回值类型是void，则子类重写的方法的返回值类型只能是void<br>父类被重写的方法的返回值类型是A类型，则子类重写的方法的返回值类型可以是A类或A类的子类<br>父类被重写的方法的返回值类型是基本数据类型(比如：double)，则子类重写的方法的返回值类型必须是相同的基本数据类型(必须也是double)<br>④ 子类重写的方法抛出的异常类型不大于父类被重写的方法抛出的异常类型</p><p>子类和父类中的同名同参数的方法要么都声明为非static的（考虑重写），要么都声明为static的（不是重写）。**</p><h2 id="9-super关键字"><a href="#9-super关键字" class="headerlink" title="9 super关键字"></a>9 super关键字</h2><blockquote><p><strong>super关键字的使用<br>1.super理解为：父类的<br>2.super可以用来调用：属性、方法、构造器</strong></p></blockquote><h3 id="9-1-super调用属性和方法"><a href="#9-1-super调用属性和方法" class="headerlink" title="9.1 super调用属性和方法"></a>9.1 <strong>super调用属性和方法</strong></h3><p>在子类的方法或构造器中。通过使用”super.属性”或”super.方法”的方式，显式的调用<br>父类中声明的属性或方法。但是，通常情况下，我们习惯省略”super.”<br>特殊情况：当子类和父类中定义了同名的属性时，我们要想在子类中调用父类中声明的属性，则必须显式的使用”super.属性”的方式，表明调用的是父类中声明的属性。</p><p>特殊情况：当子类重写了父类中的方法以后，我们想在子类的方法中调用父类中被重写的方法时，则必须显式的<br>使用”super.方法”的方式，表明调用的是父类中被重写的方法。**</p><h3 id="9-2-super调用构造器"><a href="#9-2-super调用构造器" class="headerlink" title="9.2 super调用构造器"></a>9.2 super调用构造器</h3><p>💡<br><strong>在子类的构造器中显式的使用”super(形参列表)”，调用父类中声明的指定的构造器”super(形参列表)”的使用，必须声明在子类构造器的首行！<br>在类的构造器中，针对于”this(形参列表)”或”super(形参列表)”只能二选一，不能同时出现<br>在构造器的首行，没有显式的声明”this(形参列表)”或”super(形参列表)”，则默认调用的是父类中空参的构造器：super()<br>在类的多个构造器中，至少有一个类的构造器中使用了”super(形参列表)”，调用父类中的构造器。</strong></p><h3 id="9-3-子类对象实例化的全过程"><a href="#9-3-子类对象实例化的全过程" class="headerlink" title="9.3 子类对象实例化的全过程"></a>9.3 子类对象实例化的全过程</h3><p>从结果上来看：（继承性）<br>子类继承父类以后，就获取了父类中声明的属性或方法。<br>创建子类的对象，在堆空间中，就会加载所有父类中声明的属性。**</p><p>从过程上来看：<br>当我们通过子类的构造器创建子类对象时，我们一定会直接或间接的调用其父类的构造器，进而调用父类的父类的构造器，直到调用了java.lang.Object类中空参的构造器为止。正因为加载过所有的父类的结构，所以才可以看到内存中有父类中的结构，子类对象才可以考虑进行调用。</p><p>明确：虽然创建子类对象时，调用了父类的构造器，但是自始至终就只创建过一个对象，即为new的子类对象。**</p><h2 id="10-多态性"><a href="#10-多态性" class="headerlink" title="10 多态性"></a>10 多态性</h2><blockquote><p><strong>多态性：可以理解为一个事物的多种形态。</strong></p></blockquote><p><img src="https://yancey597.github.io/posts/24752/Untitled 20.png"></p><p>何为多态性：<br>对象的多态性：父类的引用指向子类的对象（或子类的对象赋给父类的引用）</p><p>多态的使用：虚拟方法调用<br>有了对象的多态性以后，我们在编译期，只能调用父类中声明的方法，但在运行期，我们实际执行的是子类重写父类的方法。<br>总结：编译，看左边；运行，看右边。</p><p>多态性的使用前提：  ① 类的继承关系  ② 方法的重写<br>对象的多态性，只适用于方法，不适用于属性（编译和运行都看左边）**</p><h3 id="10-2-instanceof-操作符"><a href="#10-2-instanceof-操作符" class="headerlink" title="10.2 instanceof 操作符"></a>10.2 instanceof 操作符</h3><blockquote><p><strong>x instanceof A：检验x是否为类A的对象，返回值为boolean型。</strong></p></blockquote><p><strong>有了对象的多态性以后，内存中实际上是加载了子类特有的属性和方法的，但是由于变量声明为父类类型，导致编译时，只能调用父类中声明的属性和方法。子类特有的属性和方法不能调用。</strong></p><p><strong>需要使用向下转型：使用强制类型转换符。</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Book</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">EnglishBook</span> <span class="token keyword">extends</span> <span class="token class-name">Book</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token class-name">Book</span> book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">EnglishBook</span> englishbook <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">EnglishBook</span><span class="token punctuation">)</span><span class="token class-name">Book</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-2-重载和重写的区别"><a href="#10-2-重载和重写的区别" class="headerlink" title="10.2 重载和重写的区别"></a>10.2 重载和重写的区别</h3><p>重载：是指允许存在多个同名方法，而这些方法的参数不同。编译器根据方法不同的参数表，对同名方法的名称做修饰。对于编译器而言，这些同名方法就成了不同的方法。它们的调用地址在编译期就绑定了。Java的重载是可以包括父类和子类的，即子类可以重载父类的同名不同参数的方法。在方法调用之前，编译器就已经确定了所要调用的方法，<br>这称为“早绑定”或“静态绑定”；</p><p>多态：只有等到方法调用的那一刻，解释运行器才会确定所要调用的具体方法，这称为“晚绑定”或“动态绑定”。**</p><h2 id="11-Object类的使用"><a href="#11-Object类的使用" class="headerlink" title="11 Object类的使用"></a>11 Object类的使用</h2><blockquote><p><strong>主要结构<br>1 public Object() 构造 构造器<br>2 public boolean equals(Object obj) 普通 对象比较<br>3 public int hashCode() 普通 取得Hash码<br>4 public String toString() 普通 对象打印时调用</strong></p></blockquote><h3 id="11-1-操作符与equals方法"><a href="#11-1-操作符与equals方法" class="headerlink" title="11.1 ==操作符与equals方法"></a>11.1 ==操作符与equals方法</h3><p>== :<br>基本类型比较数据值：值相等即为true<br>引用类型比较引用：指向同一个对象时为true<br>符号两边的数据类型必须兼容(可自动转换的基本数据类型除外)</p><p>equals：<br>只能比较引用类型，其作用与“==”相同，比较是否指向同一个对象。<br>格式：obj1.equals(obj2)<br>特例：当用equals()方法进行比较时，对类File、String、Date及包装类<br>（Wrapper Class）来说，是比较类型及内容而不考虑引用的是否是同一个对<br>象；**</p><h3 id="11-2-和equals的区别"><a href="#11-2-和equals的区别" class="headerlink" title="11.2 ==和equals的区别"></a>11.2 ==和equals的区别</h3><p>1 == 既可以比较基本类型也可以比较引用类型。对于基本类型就是比较值，对于引用类型<br>就是比较内存地址</p><p>2 equals的话，它是属于java.lang.Object类里面的方法，如果该方法没有被重写过默认也<br>是==；我们可以看到String等类的equals方法是被重写过的，而且String类在日常开发中<br>用的比较多，久而久之，形成了equals是比较值的错误观点。</p><p>3 具体要看自定义类里有没有重写Object的equals方法来判断。</p><p>4 通常情况下，重写equals方法，会比较类中的相应属性是否都相等。**</p><p><strong>基本数据类型用 == ，引用数据类型用equals</strong></p><h3 id="11-3-toString-方法"><a href="#11-3-toString-方法" class="headerlink" title="11.3 toString 方法"></a>11.3 toString 方法</h3><blockquote><p><strong>toString()方法在Object类中定义，其返回值是String类型，返回类名和它的引用地址。</strong></p></blockquote><p><strong>在进行String与其它类型数据的连接操作时，自动调用toString()方法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Date</span> now<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>“now<span class="token operator">=</span>”<span class="token operator">+</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span> 相当于<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>“now<span class="token operator">=</span>”<span class="token operator">+</span>now<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="12-单元测试方法"><a href="#12-单元测试方法" class="headerlink" title="12 单元测试方法"></a>12 单元测试方法</h2><blockquote><p><strong>Java中的 JUnit 单元测试</strong></p></blockquote><p>步骤：</p><ol><li>选择当前工程，右击选择：build path — add libraries — JUnit 5 下一步</li><li>创建Java类，进行单元测试，一般测试什么就命名为：testXxx<br> 对Java类的要求： 此类为public，无参数构造器。</li><li>创建Java 单元测试方法。<br> 对方法的要求：此方法为public，无参数无返回值。</li><li>测试方法需要加上注解：@Test，并在单元测试类导入import org.junit.Test</li><li>在方法体类写需要测试的方法。</li><li>双击单元测试方法名，run as JUnit test**</li></ol><h2 id="13-包装类的使用"><a href="#13-包装类的使用" class="headerlink" title="13 包装类的使用"></a>13 包装类的使用</h2><p><img src="https://yancey597.github.io/posts/24752/Untitled 21.png"></p><p><img src="https://yancey597.github.io/posts/24752/Untitled 22.png"></p><blockquote><p><strong>装箱：包装类使得一个基本数据类型的数据变成了类。<br>有了类的特点，可以调用类中的方法。</strong></p></blockquote><h3 id="13-1-装箱和拆箱"><a href="#13-1-装箱和拆箱" class="headerlink" title="13.1 装箱和拆箱"></a>13.1 装箱和拆箱</h3><p><strong>装箱：把基本数据类型转化为包装类</strong></p><p><strong>拆箱：把包装类对象转化为基本数据类型</strong></p><p><strong>JDK高版本可以实现自动装箱和拆箱</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> i1 <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> i2 <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="13-2-字符串转基本数据类型"><a href="#13-2-字符串转基本数据类型" class="headerlink" title="13.2 字符串转基本数据类型"></a>13.2 <strong>字符串转基本数据类型</strong></h3><p><strong>谁转谁使用 parse+数据类型</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"1231"</span><span class="token punctuation">;</span><span class="token keyword">int</span> i1 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1231</span><span class="token class-name">String</span> trueS <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> b1 <span class="token operator">=</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token function">parseBoolean</span><span class="token punctuation">(</span>trueS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//特别的，当字符串的数据不是true时均为false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="13-3-基本数据类型变字符串"><a href="#13-3-基本数据类型变字符串" class="headerlink" title="13.3 基本数据类型变字符串"></a>13.3 <strong>基本数据类型变字符串</strong></h3><ol><li><strong>利用字符串拼接</strong></li><li><strong>利用Integer.toString</strong></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i2 <span class="token operator">=</span> <span class="token number">1234</span><span class="token punctuation">;</span><span class="token class-name">String</span> s1 <span class="token operator">=</span> i2 <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1234</span><span class="token keyword">int</span> i3 <span class="token operator">=</span> <span class="token number">2222</span><span class="token punctuation">;</span><span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>i3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="13-4-两道面试题的理解"><a href="#13-4-两道面试题的理解" class="headerlink" title="13.4 两道面试题的理解"></a>13.4 两道面试题的理解</h3><p><strong>三目运算符</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Object</span> o1 <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span><span class="token class-name">Object</span> o2<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>o2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span>o2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//o1 是 1.0 而不是1，因为三目运算符的使用需要两个条件为相同的数据类型</span><span class="token comment">//所以此处会进行自动数据类型提升</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Integer 封装类含有IntegerCache（-128~127）</strong></p><p>使用如上范围的int数据时不会重新在堆空间里面new出对应的结构，而是调用IntegerCache。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> j <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> m <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m <span class="token operator">==</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token class-name">Integer</span> x <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> y <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x <span class="token operator">==</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id=""><a href="#" class="headerlink" title=""></a></h1><hr><p><strong>永远相信美好的事情即将发生！</strong></p><p><strong>Yancey</strong></p>1642089562000]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构绪论</title>
      <link href="/posts/b06cc6ec.html"/>
      <url>/posts/b06cc6ec.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Yancey 408 数据结构学习笔记</p></blockquote><h1 id="一、绪论"><a href="#一、绪论" class="headerlink" title="一、绪论"></a>一、绪论</h1><h3 id="1-0-导学思维导图"><a href="#1-0-导学思维导图" class="headerlink" title="1.0 导学思维导图"></a>1.0 导学思维导图</h3><p><img src="https://yancey597.github.io/posts/b06cc6ec/1.jpg"></p><p><strong>数据结构学什么：</strong></p><aside> 💡 **程序代码把现实世界中的问题信息化 如何用计算机高效的处理这些信息创造价值**</aside><p><img src="https://yancey597.github.io/posts/b06cc6ec/2.jpg"></p><blockquote><p><strong>信息化时代，四大件学习的重要性</strong></p></blockquote><h2 id="1-数据结构的基本概念"><a href="#1-数据结构的基本概念" class="headerlink" title="1. 数据结构的基本概念"></a>1. 数据结构的基本概念</h2><h3 id="1-1-数据的概念"><a href="#1-1-数据的概念" class="headerlink" title="1.1 数据的概念"></a>1.1 数据的概念</h3><aside> 💡 **数据是信息的载体，是描述客观事物属性的数、字符及所有能输入到计算机中并被计算机程序识别(二进制0和1)和处理的符号的集合。数据是计算机程序加工的原料。**</aside><p><img src="https://yancey597.github.io/posts/27273/sjysj.jpg"></p><blockquote><p><strong>数据——用来描述客观现实。</strong></p></blockquote><h3 id="1-2-数据元素、数据项、数据对象的概念"><a href="#1-2-数据元素、数据项、数据对象的概念" class="headerlink" title="1.2 数据元素、数据项、数据对象的概念"></a>1.2 数据元素、数据项、数据对象的概念</h3><blockquote><p><strong>早期的计算机主要研究数值型的问题：初代计算机大多被用来科学计算。 现代计算机主要用来研究非数值的问题：个体的具体信息、个体间相互关系。</strong></p></blockquote><aside> 💡 **数据元素是数据的基本单位，通常作为一个整体进行考虑和处理。 一个数据元素可由若干数据项组成，数据项是构成数据元素的不可分割的最小单位。 具有相同性质的数据元素的集合称为数据对象**</aside><blockquote><p><strong>数据元素———描述一个个体 数据项———数据元素的具体属性 数据对象———相同性质数据元素的集合 数据结构———相互之间存在一种或多种特定关系的数据元素集合</strong></p></blockquote><blockquote><p><strong>一个班级的每个同学都是一个数据元素，这时候整个班级就可以看做一个数据对象。而数据结构想要研究的是他们之间存在的特定关系。</strong></p></blockquote><p><img src="https://yancey597.github.io/posts/b06cc6ec/3.jpg"></p><blockquote><p><strong>数据结构和数据对象的区别：是否关注数据元素间的关系。</strong></p></blockquote><p><img src="https://yancey597.github.io/posts/b06cc6ec/4.jpg"></p><p><strong>相同的数据结构可以构成不同的数据结构，不同的数据元素可以构成相同的数据结构。</strong></p><p><img src="https://yancey597.github.io/posts/b06cc6ec/5.jpg"></p><p><strong>数据结构着重关注数据元素的关系、以及操作这些数据元素，不关心具体的数据项内容。</strong></p><h2 id="2-数据结构三要素"><a href="#2-数据结构三要素" class="headerlink" title="2. 数据结构三要素"></a>2. 数据结构三要素</h2><h3 id="2-0-导学思维导图"><a href="#2-0-导学思维导图" class="headerlink" title="2.0 导学思维导图"></a>2.0 导学思维导图</h3><p><img src="https://yancey597.github.io/posts/b06cc6ec/6.jpg"></p><h3 id="2-1-逻辑结构"><a href="#2-1-逻辑结构" class="headerlink" title="2.1 逻辑结构"></a>2.1 逻辑结构</h3><blockquote><p><strong>具体构成什么逻辑结构，看我们研究的内容是什么。</strong></p></blockquote><aside> 💡 **集合：各个元素同属一个集合，不研究其他关系。<p>线性结构：数据元素间是一对一的关系，除了第一个元素都有唯一前驱，除了最后一个元素都有唯一后继。</p><p>树形结构：数据元素间是一对多的关系。</p><p>图状结构：数据元素间是多对多的关系。**</p></aside><h3 id="2-2-数据计算"><a href="#2-2-数据计算" class="headerlink" title="2.2 数据计算"></a>2.2 数据计算</h3><blockquote><p><strong>针对于某种逻辑结构，结合实际需求，定义基本运算。</strong></p></blockquote><aside> 💡 **创销增删改查。**</aside><h3 id="2-3-物理结构-存储结构"><a href="#2-3-物理结构-存储结构" class="headerlink" title="2.3 物理结构(存储结构)"></a>2.3 物理结构(存储结构)</h3><h3 id="2-30-导学思维导图"><a href="#2-30-导学思维导图" class="headerlink" title="2.30 导学思维导图"></a>2.30 导学思维导图</h3><p><img src="https://yancey597.github.io/posts/b06cc6ec/7.jpg"></p><aside> 💡 **顺序存储、链式存储、索引存储、散列存储**</aside><p><strong>索引存储：在存储元素信息的同时，建立附加索引表。索引表中的每项成为索引项，索引项的一般形式是(关键字，地址)。</strong></p><p><strong>散列存储：根据元素的关键字直接计算出该元素的存储地址，又称哈希(Hash)存储。</strong></p><p><strong>关键字：用来区分不同数据项。</strong></p><p><img src="https://yancey597.github.io/posts/b06cc6ec/8.jpg"></p><p><strong>顺序存储和非顺序存储</strong></p><p><img src="https://yancey597.github.io/posts/b06cc6ec/9.jpg"></p><aside> 💡 **定义：逻辑结构、运算 实现：存储结构**</aside><h3 id="2-4-数据类型、抽象数据类型"><a href="#2-4-数据类型、抽象数据类型" class="headerlink" title="2.4 数据类型、抽象数据类型"></a>2.4 数据类型、抽象数据类型</h3><aside> 💡 **数据类型是一个值的集合和定义在此集合上的一组操作的总称。**</aside><p><strong>原子类型：其值不可再分的数据类型。如基本数据类型。</strong></p><p><strong>结构类型：其值可以再分解为若干(成分)的数据类型。如结构体。</strong></p><aside> 💡 **抽象数据类型：是抽象数据组织及与之相关的操作。**</aside><p><strong>抽象数据类型的主要作用是数据封装和信息隐藏，让实现与使用相分离。数据及其相关操作的结合称为数据封装。对象可以对其他对象隐藏某些操作细节，从而使这些操作不会受到其他对象的影响，这就是信息隐藏。</strong></p><p><img src="https://yancey597.github.io/posts/b06cc6ec/10.jpg"></p><p><strong>定义一个ADT，就是定义一个数据结构。</strong></p><p><strong>确定ADT的存储结构才能实现这种数据结构。</strong></p><blockquote><p>ADT就是用人能理解的话规定出某一问题求解所需要的数据(来自基本数据类型复合)，抽象出对应的操作方法，而不在意计算机中是如何实现这个过程的</p></blockquote><h3 id="2-5-思维导图"><a href="#2-5-思维导图" class="headerlink" title="2.5 思维导图"></a>2.5 思维导图</h3><p><img src="https://yancey597.github.io/posts/b06cc6ec/11.jpg"></p><h2 id="3-算法的基本概念"><a href="#3-算法的基本概念" class="headerlink" title="3. 算法的基本概念"></a>3. 算法的基本概念</h2><h3 id="3-0-导学思维导图"><a href="#3-0-导学思维导图" class="headerlink" title="3.0 导学思维导图"></a>3.0 导学思维导图</h3><p><img src="https://yancey597.github.io/posts/b06cc6ec/12.jpg"></p><h3 id="3-1-什么是算法"><a href="#3-1-什么是算法" class="headerlink" title="3.1 什么是算法"></a>3.1 什么是算法</h3><aside> 💡 **算法（Algorithm）是对特定问题求解步骤的一种描述，它是指令的有限序列，其中的每条指令表示一个或多个操作**</aside><p><strong>程序 = 数据结构 + 算法</strong></p><p><strong>数据结构：用数据描述现实世界并正确的传入计算机。</strong></p><p><strong>算法：如何高效的处理这些数据，解决实际问题。</strong></p><p><strong>求解问题的步骤。</strong></p><p><img src="https://yancey597.github.io/posts/b06cc6ec/13.jpg"></p><blockquote><p>不要把算法想的如此高深，给他一个宏观的概念。</p></blockquote><h3 id="3-2-算法的特性"><a href="#3-2-算法的特性" class="headerlink" title="3.2 算法的特性"></a>3.2 算法的特性</h3><aside> 💡 **有穷性、确定性、可行性、输入、输出**</aside><p><strong>确定性：相同的输入输出都会有相同的结果。</strong></p><p><img src="https://yancey597.github.io/posts/b06cc6ec/14.jpg"></p><blockquote><p><strong>对于最简单的排序算法，可能存在排序数据项相同的情况，但每次执行的结果应该一样，如同为49岁的两位大佬在算法执行后出现的位置应该是相同的。</strong></p></blockquote><p><strong>可行性：算法描述的操作可以通过有限次的基本运算实现。</strong></p><blockquote><p><strong>不能实现不叫算法。</strong></p></blockquote><h3 id="3-3-好的算法的特征"><a href="#3-3-好的算法的特征" class="headerlink" title="3.3 好的算法的特征"></a>3.3 好的算法的特征</h3><aside> 💡 **正确性、可读性、健壮性、高效率与低存储要求**</aside><blockquote><p><strong>解释下健壮性，对于使用者输入的一些非法值应该能做出对应的反应，而不是输出随机结果。</strong></p></blockquote><h3 id="3-4-思维导图"><a href="#3-4-思维导图" class="headerlink" title="3.4 思维导图"></a>3.4 思维导图</h3><p><img src="https://yancey597.github.io/posts/b06cc6ec/15.jpg"></p><h2 id="4-时间复杂度-T-n"><a href="#4-时间复杂度-T-n" class="headerlink" title="4. 时间复杂度(T(n))"></a>4. 时间复杂度(T(n))</h2><blockquote><p><strong>如何评估算法的时间开销？</strong></p></blockquote><h3 id="4-1-评估时间开销"><a href="#4-1-评估时间开销" class="headerlink" title="4.1 评估时间开销"></a>4.1 评估时间开销</h3><p><img src="https://yancey597.github.io/posts/b06cc6ec/16.jpg"></p><p><strong>不能通过事后统计的方法评估，受客观条件的影响。</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">loveyou</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//只关心执行次数最多的代码：n+1</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"I Love more than"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//n</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token class-name">T</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">3001</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">3000</span> <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token class-name">T</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">3</span>n <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>只考虑阶数高的部分，常数项系数也可以忽略。</strong></p><p>T(n) = O(n);</p><p><strong>加法法则：</strong>多项相加只保留最高阶项，且系数变为1。</p><p><strong>乘法法则：</strong>多项相乘都保留。</p><h3 id="4-2-时间复杂度的排序"><a href="#4-2-时间复杂度的排序" class="headerlink" title="4.2 时间复杂度的排序"></a>4.2 <strong>时间复杂度的排序</strong></h3><p>$O(1) &lt; O(log_2n) &lt; O(n) &lt;O(nlog_2n)&lt;O(n^2) &lt; O(n^3)&lt;O(2^n)&lt;O(n!)&lt;O(n^n)$</p><aside> 💡 **常 对 幂 指 阶 $O(1)&lt;<o(log_2n)<<o(n)<<o(2^n)<<o(n!)$** <="" aside=""><p><img src="https://yancey597.github.io/posts/b06cc6ec/17.jpg"></p><h3 id="4-3-时间复杂度的结论"><a href="#4-3-时间复杂度的结论" class="headerlink" title="4.3 时间复杂度的结论"></a>4.3 时间复杂度的结论</h3><aside> 💡 **结论1：顺序执行的代码只影响常数项，可以直接忽略。 结论2：只需挑循环中的一个基本操作分析它的执行次数与 n 的关系即可 结论3：如果有多层嵌套循环，只需关注最深层循环循环了几次**</aside><h3 id="4-4-最好、最坏、平均时间复杂度"><a href="#4-4-最好、最坏、平均时间复杂度" class="headerlink" title="4.4 最好、最坏、平均时间复杂度"></a>4.4 最好、最坏、平均时间复杂度</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>上述代码的时间复杂度取决于数组元素的顺序。</strong></p></blockquote><p><img src="https://yancey597.github.io/posts/b06cc6ec/19.jpg"></p><h3 id="4-5-思维导图"><a href="#4-5-思维导图" class="headerlink" title="4.5 思维导图"></a>4.5 思维导图</h3><img src="https://yancey597.github.io/posts/b06cc6ec/18.jpg"><h2 id="5-空间复杂度-S-n"><a href="#5-空间复杂度-S-n" class="headerlink" title="5.空间复杂度(S(n))"></a>5.空间复杂度(S(n))</h2><blockquote><p><strong>空间开销（内存开销）与问题规模 n 之间的关系</strong></p></blockquote><h3 id="5-1-普通程序的空间复杂度"><a href="#5-1-普通程序的空间复杂度" class="headerlink" title="5.1 普通程序的空间复杂度"></a>5.1 普通程序的空间复杂度</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">love</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"I Love you"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://yancey597.github.io/posts/b06cc6ec/21.jpg"></p><p><strong>无论问题规模怎么变，算法运行所需的内存空间都是固定的常量，算法空间复杂度为 S(n) = O(1)，注：S 表示 “Space”</strong></p><p><strong>算法原地工作——算法所需内存空间为常量</strong></p><p><strong>只需关注存储空间大小与问题规模相关的变量</strong></p><h3 id="5-2-递归调用的空间复杂度"><a href="#5-2-递归调用的空间复杂度" class="headerlink" title="5.2 递归调用的空间复杂度"></a>5.2 递归调用的空间复杂度</h3><p><img src="https://yancey597.github.io/posts/b06cc6ec/20.jpg"></p><p><strong>普通的递归调用是S(n) = O(n)</strong></p><p><strong>空间复杂度 = 递归调用的深度</strong></p><p><img src="https://yancey597.github.io/posts/b06cc6ec/22.jpg"></p><h3 id="5-3-思维导图"><a href="#5-3-思维导图" class="headerlink" title="5.3 思维导图"></a>5.3 思维导图</h3><p><img src="https://yancey597.github.io/posts/b06cc6ec/23.jpg"></p><hr><p><strong>願愛無憂</strong></p><p><strong>Yancey</strong></p></o(log_2n)<<o(n)<<o(2^n)<<o(n!)$**></aside>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指针及引用传参</title>
      <link href="/posts/3ffa4f4e.html"/>
      <url>/posts/3ffa4f4e.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、引出问题"><a href="#一、引出问题" class="headerlink" title="一、引出问题"></a>一、引出问题</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;typedef int ElemType;typedef struct LNode {  ElemType data;  struct LNode *next;} LNode, *LinkList;bool InitList(LinkList L) {  L = (LNode *)malloc(sizeof(LNode));  L-&gt;data = 1;}int main(void) {  LinkList L;  InitList(L);  printf("%d", L-&gt;data);//false  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>好久没碰C，于是想拿基本的数据结构来熟悉下代码。<br>上述代码想要实现的功能是调用InitList()函数，实现对链表的初始化，但经过调用后的printf()测试之后发现报错，一直没有意识到问题所在。经过大半个小时的研究和DeBug、和一哲交流良久，意识到了问题同时也有了今天的这篇博客，接下来进入正文部分。</p></blockquote><h2 id="二、指针和指针变量"><a href="#二、指针和指针变量" class="headerlink" title="二、指针和指针变量"></a>二、指针和指针变量</h2><blockquote><p>一定要区分指针和指针变量，我发现我的问题就是太久没有碰C，对相关概念出现了模糊化。</p></blockquote><h3 id="1-指针变量"><a href="#1-指针变量" class="headerlink" title="1. 指针变量"></a>1. 指针变量</h3><p>指针变量，本质上是一个变量，他<strong>存放的是一个地址</strong>。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int a = 2;int *p = &amp;a;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>示例代码中，创建了一个int 类型的<strong>指针变量</strong></p></blockquote><h3 id="2-指针"><a href="#2-指针" class="headerlink" title="2. 指针"></a>2. 指针</h3><p>指针通常<strong>被理解为地址</strong>的意思，我们说的创建一个<strong>int类型的指针</strong>，其实是创建了一个指针类型的变量。在这个地方容易引起歧义：什么时候指针这个词表示的是一个<strong>地址</strong>、什么时候又是一个<strong>指针变量</strong>。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int a = 2;int *p = &amp;a;//p 是一个指向int类型的指针(变量)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-写出错误代码的原因"><a href="#3-写出错误代码的原因" class="headerlink" title="3. 写出错误代码的原因"></a>3. 写出错误代码的原因</h3><blockquote><p>回到开头的问题，为什么调用InitList()函数，实现对链表的初始化，但经过调用后的printf()测试之后发现报错。</p></blockquote><p>我定义这个函数的时候想着说传一个指针，我这里想传递的是一个<strong>地址</strong>，但实际上传递的是一个<strong>指针变量</strong>赋给这个形参。换句话说这里的形参是一个<strong>指针变量</strong>，而不是一个地址，我当时一直陷入这里是一个”<strong>地址</strong>“的误区。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool InitList(LinkList L) {//传递的值是一个指针变量  L = (LNode *)malloc(sizeof(LNode));  L-&gt;data = 1;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>所以我后续的malloc操作是针对<strong>形参的L</strong>进行的，我修改了L中存放的地址值，而L在函数调用结束后就出栈了，所以并没有影响实际值。这个说法其实不太严谨，但姑且这么理解。核心原因是因为日常交流时，混淆了指针和指针变量的意思。</p><h3 id="三、解决方案"><a href="#三、解决方案" class="headerlink" title="三、解决方案"></a>三、解决方案</h3><h3 id="1-用指针"><a href="#1-用指针" class="headerlink" title="1. 用指针"></a>1. 用指针</h3><blockquote><p>代码想要实现的效果是创建并初始化链表，那么修改后的代码应该是这样的。</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">LinkList InitList(LinkList L) {  L = (LNode *)malloc(sizeof(LNode));  L-&gt;data = 1;  if (L == NULL) {    return NULL;  }  return L;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将L作为<strong>返回值</strong>，直接返回到主调函数，从而实现既定效果。</p><h3 id="2-用引用"><a href="#2-用引用" class="headerlink" title="2. 用引用"></a>2. 用引用</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool InitList(LinkList &amp;L) {  L = (LNode *)malloc(sizeof(LNode));  L-&gt;data = 1;  if (L == NULL) {    return false;  }  return true;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用<strong>引用</strong>就能很好的解决这一问题，引用相当于变量的别名，可以<strong>直接</strong>对该变量进行数据的<strong>修改</strong>操作。</p><p><strong>总结一下就是一定要区分指针和指针变量的区别，写代码之前想清楚。</strong></p><hr><p><strong>永远相信美好的事情即将发生！</strong></p><p><strong>Yancey</strong><br>2021.11.01 01:11</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽象数据类型</title>
      <link href="/posts/27273.html"/>
      <url>/posts/27273.html</url>
      
        <content type="html"><![CDATA[<p>   今天学习到408数据结构时遇到一个奇奇怪怪的东西：抽象数据类型，这个概念的定义如此之长，也不是特别容易理解。然后我去Google查阅了大量资料后算是把这个概念弄清楚了。接下来简单谈下我的对抽象数据类型的理解。</p><blockquote><p>抽象数据类型(Abstract Data Type 简称ADT)是指一个数学模型以及定义在此数学模型上的一组操作。抽象数据类型需要通过固有数据类型（高级编程语言中已实现的数据类型）来实现。抽象数据类型是与表示无关的数据类型，是一个数据模型及定义在该模型上的一组运算。</p></blockquote><p><strong>太抽象以至于不太好理解，其实可以用一个等式来描述抽象数据类型。</strong></p><p><strong>抽象数据类型 = 逻辑结构 + 数据运算</strong></p><h3 id="1-逻辑结构"><a href="#1-逻辑结构" class="headerlink" title="1. 逻辑结构"></a>1. 逻辑结构</h3><p>说到<strong>逻辑结构</strong>不得不从头讲起：</p><p>我们生活在现实世界中，如何描述这世界万物呢？画家可以用手中的画笔，而我们如何来描述这个世界呢？我们可以用<strong>数据</strong>来描述这个世界。</p><p><img src="https://yancey597.github.io/posts/27273/sjysj.jpg"></p><p>接下来是层层递进的概念：</p><p>数据是信息的<strong>载体</strong>，用来描述客观事物属性的数、字符及所有能被<strong>计算机读取</strong>(二进制0、1)识别的符号的集合。</p><p><strong>数据元素</strong>是数据的基本单位，一个数据元素可以包括多个<strong>数据项</strong>，数据项是数据元素的最小构成单位。</p><p>具有相同性质的数据元素称为<strong>数据对象</strong>。</p><p>而<strong>数据元素</strong>间存在一种或多种关系的则可以称之为<strong>数据结构</strong>。</p><p>而数据的<strong>逻辑结构</strong>是数据结构的三要素之一。</p><p>常见的逻辑结构分为线性和非线性，这里就不一一展开了。</p><h3 id="2-数据运算"><a href="#2-数据运算" class="headerlink" title="2. 数据运算"></a>2. 数据运算</h3><p>施加在数据上的运算包括运算的定义和实现。运算的定义是针对逻辑结构的，指出运算的功能；运算的实现是针对存储结构的，指出运算的具体操作步骤。</p><p>比如对数据的<strong>增删改查</strong>。</p><h3 id="3-抽象数据类型"><a href="#3-抽象数据类型" class="headerlink" title="3.抽象数据类型"></a>3.抽象数据类型</h3><p>逻辑结构不涉及数据在计算机中<strong>具体的实现和存储</strong>，这些操作是由存储结构决定的，这就是说，抽象数据类型只需考虑问题本身即可。</p><p>抽象数据类型是在不涉及具体的，和计算机系统相关的细节情况下，优先理解问题本身，在此基础上，实现用计算机求解问题的过程。这就是使用抽象数据类型的目的。</p><p>抽象数据类型就是在这种形式化的描述下把数据的组成和如何操作的问题描述清楚，且<strong>没有涉及到具体的计算机具体实现的一些问题</strong>。从数据对象中看出，<strong>抽象数据类型是由基本数据类型组成</strong>。</p><p>就是告诉你这个东西是什么，有什么特征，但不关心具体是如何实现这个东西的。</p><h3 id="4-抽象数据类型和数据结构的区别"><a href="#4-抽象数据类型和数据结构的区别" class="headerlink" title="4.抽象数据类型和数据结构的区别"></a>4.抽象数据类型和数据结构的区别</h3><p>ADT is to a Data Structure, what an Interface (what it does) is to a Class (how it does it)</p><p>ADT 之于数据结构，接口（它做什么）之于类（它如何做）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">ADT<span class="token operator">:</span> <span class="token class-name">List</span>DS<span class="token operator">:</span>  <span class="token class-name">ArrayList</span><span class="token punctuation">,</span> <span class="token class-name">LinkedList</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>ADT<span class="token operator">:</span> <span class="token class-name">Map</span>DS<span class="token operator">:</span>  <span class="token class-name">HashMap</span><span class="token punctuation">,</span> <span class="token class-name">TreeMap</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><strong>永远相信美好的事情即将发生！</strong></p><p><strong>Yancey</strong></p>1635508815000]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>感谢你爱我</title>
      <link href="/posts/30626.html"/>
      <url>/posts/30626.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>宜昌，这不是我们最后一次见面。</p></blockquote><h1 id="感谢你爱我"><a href="#感谢你爱我" class="headerlink" title="感谢你爱我"></a>感谢你爱我</h1><h2 id="一、上周总结"><a href="#一、上周总结" class="headerlink" title="一、上周总结"></a>一、上周总结</h2><ul><li><input disabled="" type="checkbox"> <strong>早睡早起</strong><blockquote><p>日均睡眠时间：6小时47分钟，日均入睡时间为0:42，抛开去宜昌见丢火车那天，基本是完成了既定计划。</p></blockquote></li></ul><p><img src="https://yancey597.github.io/posts/30626/sleep.jpg"></p><ul><li><input disabled="" type="checkbox"> <strong>每天坚持学习</strong><blockquote><p>上周继续专精Java，学了Java面向对象的封装、继承、多态，不得不感叹高级语言面向对象的巧妙，嗯，Java yyds！</p></blockquote></li></ul><p><img src="https://yancey597.github.io/posts/30626/java.jpg"></p><blockquote><p>上周开始计算机考研408大纲的学习，第一门是计算机网络，相比于Java来说有些许枯燥，但还是坚持学完了第一部分，并上传一篇博客。</p></blockquote><p><img src="https://yancey597.github.io/posts/30626/network.jpg"></p><ul><li><input disabled="" type="checkbox"> <strong>坚持锻炼</strong></li></ul><p><img src="https://yancey597.github.io/posts/30626/yeqi.jpg"></p><p><img src="https://yancey597.github.io/posts/30626/yeqi1.jpg"></p><blockquote><p>本周完成了两次长距离骑行，总距离接近100km，和原计划比算是勉强及格(哈哈哈哈被一哲吐槽。 </p></blockquote><p><img src="https://yancey597.github.io/posts/30626/yeqi2.jpg"></p><blockquote><p>然后上下课基本上自行车代步，保证了每天的基本锻炼量，提高了出行效率(×)，更多的时间弹吉他(√)；</p></blockquote><ul><li><input disabled="" type="checkbox"> <strong>减少emo</strong><blockquote><p>期待了一个夏天的巡演就这么来啦！！！本周见了心心念念的丢火车，如此之开心，然后emo的次数屈指可数，嗯！真不错。</p></blockquote></li></ul><p><img src="https://yancey597.github.io/posts/30626/dhc.jpg"></p><h2 id="二、下周计划"><a href="#二、下周计划" class="headerlink" title="二、下周计划"></a>二、下周计划</h2><ul><li><input disabled="" type="checkbox"> <strong>依然是早睡早起</strong><br>  把所有工作移到白天完成，在22:30以后尽量不触碰电子设备，把很久之前的书拿出来看看，尝试在23:00准时休息。</li></ul><p>现在看来不太现实，emm，尝试在0：00休息吧，然后还是尽量不触碰电子设备，把入睡时间提到0：30之前。</p><ul><li><input disabled="" type="checkbox"> <strong>学习内容</strong><br>  Java 尽快结束面向对象课程，开始新内容的学习。围绕408大纲开始推进，用两天时间设定好学习计划：本周开始计算机组成原理、数据结构、计网的同步学习。尝试利用其他时间学英语。</li></ul><p>  吉他、乐理随缘学习，把《西湖》的间奏拿下。</p><p>  每天睡觉之前好好学习优秀摄影师的摄影作品，每天仿拍10张。</p><ul><li><p><strong>坚持锻炼</strong><br>  距离每月250km的目标还有150km，根据天气情况合理安排骑行计划。</p></li><li><p><strong>掌控情绪</strong><br>  接受不良情绪的存在，去慢慢消化。</p></li></ul><h2 id="三、再去宜昌"><a href="#三、再去宜昌" class="headerlink" title="三、再去宜昌"></a>三、再去宜昌</h2><p><img src="https://yancey597.github.io/posts/30626/12.jpg"></p><p>  相比于上次来宜昌，整个人比想象中要放松很多，这次能更加从容(或许)的走过这座城市的街头、打开心扉感受来自江城的温度。短暂的呆过几个小时，尽管有些许不舍，但人生的列车又要往南方开去，一直往南方开、一直往武汉开～(差点唱出来)。<br><img src="https://yancey597.github.io/posts/30626/20.jpg"></p><p><img src="https://yancey597.github.io/posts/30626/21.jpg"></p><p><img src="https://yancey597.github.io/posts/30626/22.jpg"></p><p>  在南方车站见了丢火车，这是我第一次来LiveHouse，哇这感觉简直不要太棒！平时一直心心念念着要见他们，但当我看到南方车站门口的感谢你爱我海报时还是感觉不太真实。</p><p><img src="https://yancey597.github.io/posts/30626/1.jpg"></p><p><img src="https://yancey597.github.io/posts/30626/2.jpg"></p><p><img src="https://yancey597.github.io/posts/30626/3.jpg"></p><p><img src="https://yancey597.github.io/posts/30626/4.jpg"></p><p><img src="https://yancey597.github.io/posts/30626/5.jpg"></p><p>  这种情况没持续多久，当火车日记的响起，感受到来自身边人释放的热情、球子他们出现在离你不到3m的舞台，瞬间把我拉回现实。爱死现场氛围，爱死他们了。一句话，<strong>我和LiveHouse相见恨晚！</strong></p><p><img src="https://yancey597.github.io/posts/30626/6.jpg"></p><p><img src="https://yancey597.github.io/posts/30626/7.jpg"></p><p><img src="https://yancey597.github.io/posts/30626/8.jpg"></p><p><img src="https://yancey597.github.io/posts/30626/9.jpg"></p><p><img src="https://yancey597.github.io/posts/30626/10.jpg"></p><p>  唯一的小插曲，当现场响起《生日快乐》，一秒破防，压抑这么久险些当场泪奔… 但很快又随着兴奋的人群开始新一轮的快乐….. </p><p><img src="https://yancey597.github.io/posts/30626/11.jpg"></p><p>  因为喜欢丢火车，来自五湖四海的我们聚在一起(有个海南过来的拿旗小伙)，缘分妙不可言。</p><p><img src="https://yancey597.github.io/posts/30626/19.jpg"></p><p>  最离谱的是居然让我找到了一个和我去程同趟高铁，返程同趟火车的朋友，下午和他在宜昌逛了逛，晚上也一起出去吃了夜宵喝了点酒。和他聊了很多很多，他给我讲了参加去音乐节、参军经历，他今年大四准备考研，也跟我分享了自己考研的经验同时鼓励我要好好学习。</p><p><img src="https://yancey597.github.io/posts/30626/18.jpg"></p><p>  也认识了同样喜欢音乐的”前排VIP”们，直接晒合影吧，以后来武汉可以一起玩呀！</p><p><img src="https://yancey597.github.io/posts/30626/17.jpg"></p><p>  最后小小的晒波战利品，不会吧，还有人没有签名？</p><p><img src="https://yancey597.github.io/posts/30626/15.jpg"></p><p><img src="https://yancey597.github.io/posts/30626/qm1.jpg"></p><p><img src="https://yancey597.github.io/posts/30626/qm2.jpg"></p><p><img src="https://yancey597.github.io/posts/30626/qm3.jpg"></p><p><img src="https://yancey597.github.io/posts/30626/qm4.jpg"></p><p>  喜欢丢火车的原因是丢火车给你撕心裂肺的感觉和其他乐队不同，同样是心里有无奈和刺痛，但他们不会爆发，而是一直面带微笑的看着你，慢慢的将这个世界的真相展现给你，告诉你可以消极、但不要持续太长时间。<strong>世界上只有一种英雄主义，那就是看清生活的真相后依然热爱生活。</strong></p><p>  来见丢火车最大的感触就是，或许世界上真的没有无法逾越的距离，就像我从来没有想过我会在线下见到他们，但还是见面了，嗯…..省略1k字。</p><p><img src="https://yancey597.github.io/posts/30626/13.jpg"></p><p>  说到这儿，想起来数据结构老师上课说的话：不要把时间都用在宿舍打游戏，实在不知道干嘛可以去跑步，比如一晚上就跑5km，刚开始可能很难，特别是刚开始跑的时候，但跑完之后你会发现也没想象中的那么难。一直坚持下去你想，连跑步这么难的事都坚持下来了，还有什么事是做不了的。</p><p>  想到了我骑行600KM来学校的经历，说真的我本人的感触都没身边人那么大，包括我朋友、同事、亲戚以及父母的同事。这个事件导致我在他们眼里的形象被神话了。我一开始确实觉得是个不值一提的事情，但听完刚刚这些，豁然开朗，生活也没想象中的那么糟嘛，现在经历的一切有骑行中经历的困难吗？<strong>保康县城那一眼望不到头的346国道、南漳连续几公里的上坡、孙桥镇没有路灯的314省道…….<strong>孤独、平静、愤怒几乎所有极端的情绪都曾经出现过，但当被雨淋一天、衣服沾满泥土，不知走出多远，从一道曲曲弯弯的弯路走过，不经意回头看到347国道的夕阳时，</strong>他就在那里，一直等着你的到来。</strong>我记不清当时的心情了，除了感叹大自然的力量外，就只剩那一瞬间感觉一切都值得。</p><p><img src="https://yancey597.github.io/posts/30626/121.jpg"></p><p>  最近经历不好的事情是挺多的，以至于我忘了之前的很多感受，那些真正让我快乐、烦恼的。相比于现在这些，算得了什么呢？</p><p>生活总归平静，一切交给时间。</p><hr><p><strong>永远相信美好的事情即将发生！</strong></p><p><strong>Yancey</strong></p>1635175712000]]></content>
      
      
      <categories>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 周记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面向对象1</title>
      <link href="/posts/24752.html"/>
      <url>/posts/24752.html</url>
      
        <content type="html"><![CDATA[<h1 id="五、面向对象（上）"><a href="#五、面向对象（上）" class="headerlink" title="五、面向对象（上）"></a>五、面向对象（上）</h1><h2 id="1-Java面向对象学习的三条路径"><a href="#1-Java面向对象学习的三条路径" class="headerlink" title="1. Java面向对象学习的三条路径"></a>1. Java面向对象学习的三条路径</h2><p>**1. Java类及类的成员：<br>属性、方法、构造器；代码块、内部类；</p><ol start="2"><li><p>面向对象的三大特征<br>封装性、继承性、多态性、(抽象性)；</p></li><li><p>其它关键字<br>this、super、static、final、abstract、interface、import、package</p></li></ol><p>大处着眼，小处着手。**</p><h2 id="2-面向过程和面向对象"><a href="#2-面向过程和面向对象" class="headerlink" title="2. 面向过程和面向对象"></a>2. 面向过程和面向对象</h2><p>**面向过程(POP) 与 面向对象(OOP)</p><ol><li>二者都是一种思想，面向对象是相对于面向过程而言的。</li></ol><p>面向过程，强调的是功能行为，以函数为最小单位，考虑怎么做。<br>面向对象，将功能封装进对象，强调具备了功能的对象，以类/对象为最小单位，考虑谁来做。</p><ol start="2"><li>面向对象更加强调运用人类在日常的思维逻辑中采用的思想方法与原则，如<br>抽象、分类、继承、聚合、多态等**</li></ol><h3 id="2-1-面向过程和面向对象的例子对比"><a href="#2-1-面向过程和面向对象的例子对比" class="headerlink" title="2.1 面向过程和面向对象的例子对比"></a>2.1 面向过程和面向对象的例子对比</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//人把大象装进冰箱</span><span class="token comment">//面向过程</span><span class="token number">1.</span>把冰箱门打开<span class="token number">2.</span>抬起大象<span class="token punctuation">,</span>放进冰箱<span class="token number">3.</span>关闭冰箱门<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//面向对象</span>人<span class="token punctuation">{</span><span class="token comment">//打开(冰箱){</span>冰箱<span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//抬起(大象){</span>大象<span class="token punctuation">.</span><span class="token function">setin</span><span class="token punctuation">(</span>冰箱<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//关闭(冰箱){</span>冰箱<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>冰箱<span class="token punctuation">{</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span>大象<span class="token punctuation">{</span><span class="token function">setin</span><span class="token punctuation">(</span>冰箱<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>程序员从面向过程的执行者转化成了面向对象的指挥者</strong></p></blockquote><p>**面向对象分析方法分析问题的思路和步骤：</p><ol><li>根据问题需要选择问题所针对的现实世界中的实体。</li><li>从实体中寻找解决问题相关的属性和功能，这些属性和功能就形成了概念世界中的类。</li><li>把抽象的实体用计算机语言进行描述，形成计算机世界中类的定义。即借助某种程序<br>语言，把类构造成计算机能够识别和处理的数据结构。</li><li>将类实例化成计算机世界中的对象。对象是计算机世界中解决问题的最终工具。**</li></ol><p><strong>实体&gt;(抽象)&gt;属性、功能&gt;(计算机语言描述)&gt;类&gt;(实例化类)&gt;对象</strong></p><h2 id="3-类和对象思想"><a href="#3-类和对象思想" class="headerlink" title="3.类和对象思想"></a>3.类和对象思想</h2><h3 id="3-1-思想概述"><a href="#3-1-思想概述" class="headerlink" title="3.1 思想概述"></a>3.1 思想概述</h3><p>**类(Class)和对象(Object)是面向对象的核心概念。</p><ol><li>类是对一类事物的描述，是抽象的、概念上的定义。</li><li>对象是实际存在的该类事物的每个个体，因而也称为实例(instance)。**</li></ol><p><strong>面向对象程序设计的重点是类的设计<br>类的设计就是类的成员的设计。</strong></p><blockquote><p><strong>人是一个类，具体的某个人是一个对象</strong></p></blockquote><h3 id="3-2-类属性、方法的概念"><a href="#3-2-类属性、方法的概念" class="headerlink" title="3.2 类属性、方法的概念"></a>3.2 类属性、方法的概念</h3><p><img src="https://yancey597.github.io/posts/24752/1.jpg"></p><p>**Field = 属性 = 成员变量 = 域、字段<br>Method = 成员方法 = 函数</p><p>创建类对象 = 实例化类**</p><blockquote><p><strong>生活中描述事物无非就是描述事物的属性和行为。<br>如:人有身高，体重等属性，有说话，打球等行为。</strong></p></blockquote><h3 id="3-3-类和对象的使用-面向对象思想落地的实现"><a href="#3-3-类和对象的使用-面向对象思想落地的实现" class="headerlink" title="3.3 类和对象的使用(面向对象思想落地的实现)"></a>3.3 类和对象的使用(面向对象思想落地的实现)</h3><p><strong>1.创建类：设计类的成员。<br>2.创建类的对象。<br>3.通过”对象名.属性”或“对象名.方法”调用对象的结构。</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">*</span><span class="token operator">*</span>修饰符 <span class="token keyword">class</span> 类名 <span class="token punctuation">{</span>属性声明<span class="token punctuation">;</span>方法声明<span class="token punctuation">;</span><span class="token punctuation">}</span>说明：修饰符<span class="token keyword">public</span>：类可以被任意访问类的正文要用<span class="token punctuation">{</span> <span class="token punctuation">}</span>括起来<span class="token operator">*</span><span class="token operator">*</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//类的实例化</span><span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用类的属性、方法</span><span class="token comment">//调用属性："对象名.属性"</span>p1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Yancey"</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token comment">//调用方法："对象名.方法"</span>p1<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span><span class="token function">talk</span><span class="token punctuation">(</span><span class="token string">"Chinese"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token comment">//属性</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">boolean</span> isMan<span class="token punctuation">;</span><span class="token comment">//方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人可以吃饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人可以睡觉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">talk</span><span class="token punctuation">(</span><span class="token class-name">String</span> language<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人可以说话,使用的是"</span> <span class="token operator">+</span> language<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-类的多个对象"><a href="#3-4-类的多个对象" class="headerlink" title="3.4 类的多个对象"></a>3.4 类的多个对象</h3><p><strong>如果创建了一个类的多个对象，则每个对象都独立的拥有一套类的属性(非static)。</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Yancey"</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>p2 <span class="token operator">=</span> p1<span class="token punctuation">;</span><span class="token comment">//地址！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-5-对象的内存解析"><a href="#3-5-对象的内存解析" class="headerlink" title="3.5 对象的内存解析"></a>3.5 对象的内存解析</h3><p><img src="https://yancey597.github.io/posts/24752/2.jpg"></p><p><img src="https://yancey597.github.io/posts/24752/3.jpg"></p><p><strong>虚拟机栈： 俗称的栈，局部变量放在栈中。</strong></p><p><strong>堆：</strong>我们将<strong>new出来的结构</strong>(比如:数组、对象)加载在堆空间中。补充**:对象的属性**(非static的)加载在堆空间中。</p><p><strong>方法区：</strong>类的加载信息、常量池、静态域。</p><h3 id="3-6-理解万事万物皆对象"><a href="#3-6-理解万事万物皆对象" class="headerlink" title="3.6 理解万事万物皆对象"></a>3.6 理解万事万物皆对象</h3><ol><li><strong>在Java语言范畴中，我们都将功能、结构等封装到类中，通过类的实例化，来调用具体的功能结构。</strong><blockquote><p>Scanner ,String等<br>文件:File<br>网络资源:URL</p></blockquote></li><li><strong>涉及到Java语言与前端Html、后端的数据库交互时，前后端的结构在Java层面交互时，都体现为类、对象。</strong></li></ol><h3 id="3-7-匿名对象"><a href="#3-7-匿名对象" class="headerlink" title="3.7 匿名对象"></a>3.7 匿名对象</h3><p>1.理解：我们创建的对象，没有显式的赋给一个变量名。即为匿名对象</p><p>2.特征：匿名对象只能调用一次。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnonymousObject</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">StudentFactory</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StudentFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">showEat</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//匿名对象的使用</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">StudentFactory</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showEat</span><span class="token punctuation">(</span><span class="token class-name">Student</span> stu<span class="token punctuation">)</span> <span class="token punctuation">{</span>stu<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用student类的方法</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学生会吃饭！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-成员变量-属性-和局部变量的对比"><a href="#4-成员变量-属性-和局部变量的对比" class="headerlink" title="4. 成员变量(属性)和局部变量的对比"></a>4. 成员变量(属性)和局部变量的对比</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> user<span class="token punctuation">{</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token comment">//属性(成员变量)</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">boolean</span> isMale<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">talk</span><span class="token punctuation">(</span><span class="token class-name">String</span> language<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//形参</span><span class="token class-name">String</span> abc <span class="token operator">=</span> <span class="token string">"OK"</span><span class="token punctuation">;</span><span class="token comment">//局部变量</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这个人说"</span> <span class="token operator">+</span> language<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>相同点：</strong></p><ol><li><strong>定义变量的格式：数据类型变量名 = 变量值</strong></li><li><strong>先声明，后使用</strong></li><li><strong>变量都有其对应的作用域</strong></li></ol><p><strong>不同点：</strong></p><ol><li><p><strong>在类中声明的位置不同</strong></p><p> <strong>成员变量：直接声明在类的{}内的变量</strong></p><p> <strong>局部变量：声明在方法内、方法形参、代码块内、构造器形参、构造器内部的变量</strong></p></li><li><p><strong>关于权限修饰符的不同<br>属性：可以在声明属性时，指明其权限，使用权限修饰符<br>常用的权限修饰符：private、 public、缺省、protected<br>局部变量：不能用权限修饰符(除了final，方法的权限即为局部变量的权限)</strong></p></li><li><p><strong>默认初始化值不同<br>属性：类的属性，根据其类型，都有默认初始化值<br>意味着，我们在调用局部变量之前，一定要显式赋值。<br>特别地：形参在调用时，我们赋值即可。</strong></p></li><li><p><strong>在内存中加载位置不同<br>属性：加载在堆空间中(非static)<br>局部变量：加载在栈空间</strong></p></li></ol><p><img src="https://yancey597.github.io/posts/24752/4.jpg"></p><h2 id="4-类中方法的声明、使用"><a href="#4-类中方法的声明、使用" class="headerlink" title="4. 类中方法的声明、使用"></a>4. 类中方法的声明、使用</h2><blockquote><p><strong>方法：描述类应该具有的功能。<br>比如：Math类：sqrt()、random()<br>Scanner类：nextXxx() …<br>Arrays类：sort()、binarySearch()、toString()、equals() …</strong></p></blockquote><h3 id="4-1-方法的声明："><a href="#4-1-方法的声明：" class="headerlink" title="4.1 方法的声明："></a>4.1 方法的声明：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">*</span><span class="token operator">*</span>权限修饰符 返回值类型 方法名<span class="token punctuation">(</span>形参列表<span class="token punctuation">)</span><span class="token punctuation">{</span>方法体<span class="token punctuation">}</span><span class="token number">1.</span> 权限修饰符：默认方法的权限修饰符先都使用<span class="token keyword">public</span><span class="token class-name">Java</span>规定的<span class="token number">4</span>种权限修饰符：<span class="token keyword">private</span>、<span class="token keyword">public</span>、缺省、<span class="token keyword">protected</span><span class="token number">2.</span> 返回值类型： 有返回值  vs 没有返回值如果方法有返回值，则必须在方法声明时，指定返回值的类型。方法中需要使用<span class="token keyword">return</span>关键字来返回指定类型的变量或常量：“<span class="token keyword">return</span> 数据”。如果方法没有返回值，则方法声明时，使用<span class="token keyword">void</span>来表示。通常，没有返回值的方法中，就不需要使用<span class="token keyword">return</span>。如果使用的话，只能“<span class="token keyword">return</span><span class="token punctuation">;</span>”表示结束此方法的意思。<span class="token number">3.</span> 方法名：属于标识符，遵循标识符的规则和规范，“见名知意”<span class="token operator">*</span><span class="token operator">*</span><span class="token number">4.</span> 形参列表： 方法可以声明<span class="token number">0</span>个，<span class="token number">1</span>个，或多个形参。格式：数据类型<span class="token number">1</span> 形参<span class="token number">1</span><span class="token punctuation">,</span>数据类型<span class="token number">2</span> 形参<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">5.</span>方法体：方法功能的体现。方法的使用中，可以调用当前类的属性或方法；特殊的：方法<span class="token class-name">A</span>中又调用了方法<span class="token class-name">A</span><span class="token operator">:</span>递归方法。方法中，不可以定义方法。<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>注意：<span class="token keyword">static</span>、<span class="token keyword">final</span>、<span class="token keyword">abstract</span> 来修饰的方法，后面再讲<span class="token operator">*</span><span class="token operator">*</span>。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-方法的重载"><a href="#4-2-方法的重载" class="headerlink" title="4.2 方法的重载"></a>4.2 方法的重载</h3><p>**重载的概念<br>在同一个类中，允许存在一个以上的同名方法，只要它们的参数个数或者参数<br>类型不同即可。</p><p>重载的特点：<br>与返回值类型无关，只看参数列表，且参数列表必须不同。(参数个数或参数类<br>型)。调用时，根据方法参数列表的不同来区别。**</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> overLoadTest<span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> sum <span class="token operator">=</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"两个数之和是"</span><span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">double</span> i<span class="token punctuation">,</span> <span class="token keyword">double</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">double</span> sum <span class="token operator">=</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The sum is "</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//方法的重载</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>通过对象调用方法时，如何确定执行指定的方法？</strong></p><p><strong>方法名 —&gt; 参数列表</strong></p><h3 id="4-3-可变参数的形参"><a href="#4-3-可变参数的形参" class="headerlink" title="4.3 可变参数的形参"></a>4.3 可变参数的形参</h3><p>**可变个数形参的格式：数据类型 … 变量名</p><p>当调用可变个数形参的方法时，传入的参数个数可以是：0个,1个,2个，。。。<br>可变个数形参的方法与本类中方法名相同，形参不同的方法之间构成重载<br>可变个数形参的方法与本类中方法名相同，形参类型也相同的数组之间不构成重载。换句话说，二者不能共存。<br>可变个数形参在方法的形参中，必须声明在末尾<br>可变个数形参在方法的形参中,最多只能声明一个可变形参。**</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OverLoadTest2</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">OverLoadTest2</span> printtest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OverLoadTest2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>printtest<span class="token punctuation">.</span><span class="token function">printTest</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printTest</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//**可变个数形参在方法的形参中，必须声明在末尾</span><span class="token comment">//可变个数形参在方法的形参中,最多只能声明一个可变形参。**</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> string<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-方法中的值传递机制"><a href="#4-4-方法中的值传递机制" class="headerlink" title="4.4 方法中的值传递机制"></a>4.4 方法中的值传递机制</h3><blockquote><p><strong>方法的形参的传递机制：值传递</strong></p></blockquote><p><strong>形参：</strong></p><p>方法定义时，声明的小括号内的参数 </p><p><strong>实参：</strong></p><p>方法调用时，实际传递给形参的数据</p><p><strong>值传递机制</strong>：</p><p><strong>如果参数是基本数据类型，此时实参赋给形参的是实参真实存储的数据值。</strong></p><p><strong>如果参数是引用数据类型，此时实参赋给形参的是实参存储数据的地址值。</strong></p><h3 id="4-5-递归"><a href="#4-5-递归" class="headerlink" title="4.5 递归"></a>4.5 递归</h3><h2 id="5-封装与隐藏"><a href="#5-封装与隐藏" class="headerlink" title="5 封装与隐藏"></a>5 封装与隐藏</h2><blockquote><p>为什么需要封装？封装的作用和含义？<br>我要用洗衣机，只需要按一下开关和洗涤模式就可以了。有必要了解洗衣机内<br>部的结构吗？有必要碰电动机吗？</p></blockquote><aside>程序设计追求“高内聚，低耦合”。<p>高内聚 ：类的内部数据操作细节自己完成，不允许外部干涉；<br>低耦合 ：仅对外暴露少量的方法用于使用。<br>隐藏对象内部的复杂性，只对外公开简单的接口。便于外界调用，从而提高系统的可扩展性、可维护性。通俗的说，把该隐藏的隐藏起来，该暴露的暴露出来。这就是封装性的设计思想。**</p><blockquote><p><strong>问题引入，属性封装性的体现：类的属性私有化，提供公共(Public)方法设置获取属性的值<br>拓展：封装性的体现：不对外暴露的私有方法，单例模式。<br>封装性的体现：需要权限修饰符的配合。</strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> legs<span class="token punctuation">;</span><span class="token comment">//private修饰符</span><span class="token comment">//对某些特定属性的设置</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLegs</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">)</span> <span class="token punctuation">{</span>legs <span class="token operator">=</span> l<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>legs<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span> legs <span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>legs <span class="token operator">=</span> l<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>legs <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//抛出一个异常，暂时没有讲</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//对属性的获取</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getLegs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> legs<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-1-权限修饰符"><a href="#5-1-权限修饰符" class="headerlink" title="5.1 权限修饰符"></a>5.1 权限修饰符</h3><aside>Java规定的四种权限：从大到小public、protected、缺省(default)、private。<p>可以修饰类及类的内部结构：属性、方法、构造器、内部类。</p><p>修饰类：只能是public、default。<br>总结封装性：Java提供了4种权限修饰符来修饰类及类的内部结构，体现类及类的内部结构在被调用时的可见性的大小。**</p><p>![Untitled](C:\Users\Yancey\Desktop\Programming master\Java\笔记\Java\Untitled 13.png)</p><p><img src="https://yancey597.github.io/posts/24752/.jpg">Untitled 14.png)</p><h2 id="6-构造器、构造方法的使用"><a href="#6-构造器、构造方法的使用" class="headerlink" title="6 构造器、构造方法的使用"></a>6 构造器、构造方法的使用</h2><h3 id="6-1-构造器的作用："><a href="#6-1-构造器的作用：" class="headerlink" title="6.1 构造器的作用："></a>6.1 构造器的作用：</h3><p><strong>1.创建对象</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Person()....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>name <span class="token operator">=</span> n<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2.初始化对象的信息</strong></p><h3 id="6-2-说明："><a href="#6-2-说明：" class="headerlink" title="6.2 说明："></a>6.2 说明：</h3><aside>1.如果没有显式的定义类的构造器的话，则系统默认提供一个空参的构造器2.定义构造器的格式：权限修饰符  类名(形参列表){}3.一个类中定义的多个构造器，彼此构成重载4.一旦我们显式的定义了类的构造器之后，系统就不再提供默认的空参构造器5.一个类中，至少会有一个构造器。**<h3 id="6-3-属性赋值"><a href="#6-3-属性赋值" class="headerlink" title="6.3 属性赋值"></a>6.3 属性赋值</h3><aside>总结：属性赋值的先后顺序<p>① 默认初始化<br>② 显式初始化<br>③ 构造器中初始化</p><p>④ 通过”对象.方法” 或 “对象.属性”的方式，赋值<br>以上操作的先后顺序：① - ② - ③ - ④**</p><h3 id="6-4-拓展知识：Java-Bean"><a href="#6-4-拓展知识：Java-Bean" class="headerlink" title="6.4 拓展知识：Java Bean"></a>6.4 拓展知识：Java Bean</h3><aside>类是公共的：有一个无参的公共的构造器有属性，且有对应的get，set方法**<h3 id="6-5-UML图"><a href="#6-5-UML图" class="headerlink" title="6.5 UML图"></a>6.5 UML图</h3><p>![Untitled](C:\Users\Yancey\Desktop\Programming master\Java\笔记\Java\Untitled 15.png)</p><h3 id="6-6-this-关键字"><a href="#6-6-this-关键字" class="headerlink" title="6.6 this 关键字"></a>6.6 this 关键字</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//空参构造器</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token comment">//当形参和类的属性名相同时需要用this关键字</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><strong>this关键字的用途</strong></li></ol><aside>this关键字的使用：<p>1.this 可以用来修饰、调用：属性、方法、构造器<br>2.this修饰属性和方法：<br>this理解为：当前对象  或 当前正在创建的对象**</p><ol><li><strong>如何使用this关键字</strong></li></ol><aside>2.1  在类的方法中，我们可以使用"this.属性"或"this.方法"的方式，调用当前对象属性或方法。但是，通常情况下，我们都选择省略"this."。特殊情况下，如果方法的形参和类的属性同名时，我们必须显式的使用"this.变量"的方式，表明此变量是属性，而非形参。<p>2.2 在类的构造器中，我们可以使用”this.属性”或”this.方法”的方式，调用当前正在创建的对象属性或方法。但是，通常情况下，我们都选择省略”this.”。特殊情况下，如果构造器的形参和类的属性同名时，我们必须显式的使用”this.变量”的方式，表明此变量是属性，而非形参。**</p><ol><li><strong>this调用构造器</strong></li></ol><aside>① 在类的构造器中，可以显式的使用"this(形参列表)"方式调用本类中指定的其他构造器② 构造器中不能通过"this(形参列表)"方式调用自己③ 如果一个类中有n个构造器，则最多有 n - 1构造器中使用了"this(形参列表)"④ 规定："this(形参列表)"必须声明在当前构造器的首行⑤ 构造器内部，最多只能声明一个"this(形参列表)"，用来调用其他的构造器**<h3 id="6-7-MVC设计模式"><a href="#6-7-MVC设计模式" class="headerlink" title="6.7 MVC设计模式"></a>6.7 MVC设计模式</h3><p>![Untitled](C:\Users\Yancey\Desktop\Programming master\Java\笔记\Java\Untitled 16.png)</p><p>![Untitled](C:\Users\Yancey\Desktop\Programming master\Java\笔记\Java\Untitled 17.png)</p><h3 id="6-8-JDK常用包"><a href="#6-8-JDK常用包" class="headerlink" title="6.8 JDK常用包"></a>6.8 JDK常用包</h3><p>![Untitled](C:\Users\Yancey\Desktop\Programming master\Java\笔记\Java\Untitled 18.png)</p><h3 id="6-9-Package-关键字"><a href="#6-9-Package-关键字" class="headerlink" title="6.9 Package 关键字"></a>6.9 Package 关键字</h3><aside>package关键字的使用<ol><li>为了更好的实现项目中类的管理，提供包的概念</li><li>使用package声明类或接口所属的包，声明在源文件的首行</li><li>包，属于标识符，遵循标识符的命名规则、规范(xxxyyyzzz)、“见名知意”</li><li>每”.”一次，就代表一层文件目录。</li></ol><p>补充：同一个包下，不能命名同名的接口、类。<br>不同的包下，可以命名同名的接口、类。**</p><h3 id="6-10-import关键字的使用"><a href="#6-10-import关键字的使用" class="headerlink" title="6.10 import关键字的使用"></a>6.10 import关键字的使用</h3><aside>import：导入**<ol><li><p>**在源文件中显式的使用import结构导入指定包下的类、接口</p></li><li><p>声明在包的声明和类的声明之间</p></li><li><p>如果需要导入多个结构，则并列写出即可</p></li><li><p>可以使用”xxx.”的方式，表示可以导入xxx包下的所有结构</p></li><li><p>如果使用的类或接口是java.lang包下定义的，则可以省略import结构</p></li><li><p>如果使用的类或接口是本包下定义的，则可以省略import结构</p></li><li><p>如果在源文件中，使用了不同包下的同名的类，则必须至少有一个类需要以全类名的方式显示。</p></li><li><p>使用”xxx.”方式表明可以调用xxx包下的所有结构。但是如果使用的是xxx子包下的结构，则仍需要显式导入</p></li></ol><p>import static：导入指定类或接口中的静态结构：属性或方法。**</p><h2 id="7-继承性"><a href="#7-继承性" class="headerlink" title="7. 继承性"></a>7. 继承性</h2><blockquote><p><strong>面向对象的特征之二：继承性    why?<br>extends：延展、扩展</strong></p></blockquote><h3 id="7-1-继承性的好处："><a href="#7-1-继承性的好处：" class="headerlink" title="7.1 继承性的好处："></a>7.1 继承性的好处：</h3><aside>① 减少了代码的冗余，提高了代码的复用性② 便于功能的扩展③ 为之后多态性的使用，提供了前提**<h3 id="7-2-继承性的格式"><a href="#7-2-继承性的格式" class="headerlink" title="7.2 继承性的格式"></a>7.2 继承性的格式</h3><aside>class A extends B{}A:子类、派生类、subclassB:父类、超类、基类、superclass<p>体现：一旦子类A继承父类B以后，子类A中就获取了父类B中声明的所有的属性和方法。</p><pre><code> 特别的，父类中声明为private的属性或方法，子类继承父类以后，仍然认为获取了父类中私有的结构。因为封装性的影响，使得子类不能直接调用父类的结构而已。     子类继承父类以后，还可以声明自己特有的属性或方法：实现功能的拓展。</code></pre><p>子类和父类的关系，不同于子集和集合的关系。**</p><h3 id="7-3-继承性的规定"><a href="#7-3-继承性的规定" class="headerlink" title="7.3 继承性的规定"></a>7.3 继承性的规定</h3><aside>1. 一个类可以被多个子类继承。2. Java中类的单继承性：一个类只能有一个父类3. 子父类是相对的概念。4. 子类直接继承的父类，称为：直接父类。间接继承的父类称为：间接父类5. 子类继承父类以后，就获取了直接父类以及所有间接父类中声明的属性和方法**<p>![Untitled](C:\Users\Yancey\Desktop\Programming master\Java\笔记\Java\Untitled 19.png)</p><h3 id="7-4-Object-类"><a href="#7-4-Object-类" class="headerlink" title="7.4 Object 类"></a>7.4 Object 类</h3><aside>如果我们没有显式的声明一个类的父类的话，则此类继承于java.lang.Object类所有的java类（除java.lang.Object类之外）都直接或间接的继承于java.lang.Object类意味着，所有的java类具有java.lang.Object类声明的功能。**<h2 id="8-方法的重写"><a href="#8-方法的重写" class="headerlink" title="8. 方法的重写"></a>8. 方法的重写</h2><h3 id="8-1-概念"><a href="#8-1-概念" class="headerlink" title="8.1 概念"></a>8.1 概念</h3><aside>子类继承父类以后，可以对父类中同名同参数的方法，进行覆盖操作**<h3 id="8-2-应用"><a href="#8-2-应用" class="headerlink" title="8.2 应用"></a>8.2 应用</h3><aside>重写以后，当创建子类对象以后，通过子类对象调用子父类中的同名同参数的方法时，实际执行的是子类重写父类的方法。**<h3 id="8-3重写的规定"><a href="#8-3重写的规定" class="headerlink" title="8.3重写的规定"></a><strong>8.3重写的规定</strong></h3><aside>方法的声明： <p>权限修饰符 返回值类型 方法名(形参列表) throws 异常的类型{<br>//方法体<br>}</p><p>约定俗称：子类中的叫重写的方法，父类中的叫被重写的方法<br>① 子类重写的方法的方法名和形参列表与父类被重写的方法的方法名和形参列表相同<br>② 子类重写的方法的权限修饰符不小于父类被重写的方法的权限修饰符</p><p>特殊情况：子类不能重写父类中声明为private权限的方法</p><p>③ 返回值类型：<br>父类被重写的方法的返回值类型是void，则子类重写的方法的返回值类型只能是void<br>父类被重写的方法的返回值类型是A类型，则子类重写的方法的返回值类型可以是A类或A类的子类<br>父类被重写的方法的返回值类型是基本数据类型(比如：double)，则子类重写的方法的返回值类型必须是相同的基本数据类型(必须也是double)<br>④ 子类重写的方法抛出的异常类型不大于父类被重写的方法抛出的异常类型</p><p>子类和父类中的同名同参数的方法要么都声明为非static的（考虑重写），要么都声明为static的（不是重写）。**</p><h2 id="9-super关键字"><a href="#9-super关键字" class="headerlink" title="9 super关键字"></a>9 super关键字</h2><blockquote><p><strong>super关键字的使用<br>1.super理解为：父类的<br>2.super可以用来调用：属性、方法、构造器</strong></p></blockquote><h3 id="9-1-super调用属性和方法"><a href="#9-1-super调用属性和方法" class="headerlink" title="9.1 super调用属性和方法"></a>9.1 <strong>super调用属性和方法</strong></h3><aside>在子类的方法或构造器中。通过使用"super.属性"或"super.方法"的方式，显式的调用父类中声明的属性或方法。但是，通常情况下，我们习惯省略"super."特殊情况：当子类和父类中定义了同名的属性时，我们要想在子类中调用父类中声明的属性，则必须显式的使用"super.属性"的方式，表明调用的是父类中声明的属性。<p>特殊情况：当子类重写了父类中的方法以后，我们想在子类的方法中调用父类中被重写的方法时，则必须显式的<br>使用”super.方法”的方式，表明调用的是父类中被重写的方法。**</p><h3 id="9-2-super调用构造器"><a href="#9-2-super调用构造器" class="headerlink" title="9.2 super调用构造器"></a>9.2 super调用构造器</h3><aside>💡 **在子类的构造器中显式的使用"super(形参列表)"，调用父类中声明的指定的构造器"super(形参列表)"的使用，必须声明在子类构造器的首行！在类的构造器中，针对于"this(形参列表)"或"super(形参列表)"只能二选一，不能同时出现在构造器的首行，没有显式的声明"this(形参列表)"或"super(形参列表)"，则默认调用的是父类中空参的构造器：super()在类的多个构造器中，至少有一个类的构造器中使用了"super(形参列表)"，调用父类中的构造器。**<h3 id="9-3-子类对象实例化的全过程"><a href="#9-3-子类对象实例化的全过程" class="headerlink" title="9.3 子类对象实例化的全过程"></a>9.3 子类对象实例化的全过程</h3><aside>从结果上来看：（继承性）子类继承父类以后，就获取了父类中声明的属性或方法。创建子类的对象，在堆空间中，就会加载所有父类中声明的属性。**<aside>从过程上来看：当我们通过子类的构造器创建子类对象时，我们一定会直接或间接的调用其父类的构造器，进而调用父类的父类的构造器，直到调用了java.lang.Object类中空参的构造器为止。正因为加载过所有的父类的结构，所以才可以看到内存中有父类中的结构，子类对象才可以考虑进行调用。<p>明确：虽然创建子类对象时，调用了父类的构造器，但是自始至终就只创建过一个对象，即为new的子类对象。**</p><h2 id="10-多态性"><a href="#10-多态性" class="headerlink" title="10 多态性"></a>10 多态性</h2><blockquote><p><strong>多态性：可以理解为一个事物的多种形态。</strong></p></blockquote><p>![Untitled](C:\Users\Yancey\Desktop\Programming master\Java\笔记\Java\Untitled 20.png)</p><aside>何为多态性：对象的多态性：父类的引用指向子类的对象（或子类的对象赋给父类的引用）<p>多态的使用：虚拟方法调用<br>有了对象的多态性以后，我们在编译期，只能调用父类中声明的方法，但在运行期，我们实际执行的是子类重写父类的方法。<br>总结：编译，看左边；运行，看右边。</p><p>多态性的使用前提：  ① 类的继承关系  ② 方法的重写<br>对象的多态性，只适用于方法，不适用于属性（编译和运行都看左边）**</p><h3 id="10-2-instanceof-操作符"><a href="#10-2-instanceof-操作符" class="headerlink" title="10.2 instanceof 操作符"></a>10.2 instanceof 操作符</h3><blockquote><p><strong>x instanceof A：检验x是否为类A的对象，返回值为boolean型。</strong></p></blockquote><p><strong>有了对象的多态性以后，内存中实际上是加载了子类特有的属性和方法的，但是由于变量声明为父类类型，导致编译时，只能调用父类中声明的属性和方法。子类特有的属性和方法不能调用。</strong></p><p><strong>需要使用向下转型：使用强制类型转换符。</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Book</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">EnglishBook</span> <span class="token keyword">extends</span> <span class="token class-name">Book</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token class-name">Book</span> book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">EnglishBook</span> englishbook <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">EnglishBook</span><span class="token punctuation">)</span><span class="token class-name">Book</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-2-重载和重写的区别"><a href="#10-2-重载和重写的区别" class="headerlink" title="10.2 重载和重写的区别"></a>10.2 重载和重写的区别</h3><aside>重载：是指允许存在多个同名方法，而这些方法的参数不同。编译器根据方法不同的参数表，对同名方法的名称做修饰。对于编译器而言，这些同名方法就成了不同的方法。它们的调用地址在编译期就绑定了。Java的重载是可以包括父类和子类的，即子类可以重载父类的同名不同参数的方法。在方法调用之前，编译器就已经确定了所要调用的方法，这称为“早绑定”或“静态绑定”；<p>多态：只有等到方法调用的那一刻，解释运行器才会确定所要调用的具体方法，这称为“晚绑定”或“动态绑定”。**</p><h2 id="11-Object类的使用"><a href="#11-Object类的使用" class="headerlink" title="11 Object类的使用"></a>11 Object类的使用</h2><blockquote><p><strong>主要结构<br>1 public Object() 构造 构造器<br>2 public boolean equals(Object obj) 普通 对象比较<br>3 public int hashCode() 普通 取得Hash码<br>4 public String toString() 普通 对象打印时调用</strong></p></blockquote><h3 id="11-1-操作符与equals方法"><a href="#11-1-操作符与equals方法" class="headerlink" title="11.1 ==操作符与equals方法"></a>11.1 ==操作符与equals方法</h3><aside>== :基本类型比较数据值：值相等即为true引用类型比较引用：指向同一个对象时为true符号两边的数据类型必须兼容(可自动转换的基本数据类型除外)<p>equals：<br>只能比较引用类型，其作用与“==”相同，比较是否指向同一个对象。<br>格式：obj1.equals(obj2)<br>特例：当用equals()方法进行比较时，对类File、String、Date及包装类<br>（Wrapper Class）来说，是比较类型及内容而不考虑引用的是否是同一个对<br>象；**</p><h3 id="11-2-和equals的区别"><a href="#11-2-和equals的区别" class="headerlink" title="11.2 ==和equals的区别"></a>11.2 ==和equals的区别</h3><aside>1 == 既可以比较基本类型也可以比较引用类型。对于基本类型就是比较值，对于引用类型就是比较内存地址<p>2 equals的话，它是属于java.lang.Object类里面的方法，如果该方法没有被重写过默认也<br>是==；我们可以看到String等类的equals方法是被重写过的，而且String类在日常开发中<br>用的比较多，久而久之，形成了equals是比较值的错误观点。</p><p>3 具体要看自定义类里有没有重写Object的equals方法来判断。</p><p>4 通常情况下，重写equals方法，会比较类中的相应属性是否都相等。**</p><p><strong>基本数据类型用 == ，引用数据类型用equals</strong></p><h3 id="11-3-toString-方法"><a href="#11-3-toString-方法" class="headerlink" title="11.3 toString 方法"></a>11.3 toString 方法</h3><blockquote><p><strong>toString()方法在Object类中定义，其返回值是String类型，返回类名和它的引用地址。</strong></p></blockquote><p><strong>在进行String与其它类型数据的连接操作时，自动调用toString()方法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Date</span> now<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>“now<span class="token operator">=</span>”<span class="token operator">+</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span> 相当于<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>“now<span class="token operator">=</span>”<span class="token operator">+</span>now<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="12-单元测试方法"><a href="#12-单元测试方法" class="headerlink" title="12 单元测试方法"></a>12 单元测试方法</h2><blockquote><p><strong>Java中的 JUnit 单元测试</strong></p></blockquote><aside>步骤：1. 选择当前工程，右击选择：build path — add libraries — JUnit 5 下一步2. 创建Java类，进行单元测试，一般测试什么就命名为：testXxx    对Java类的要求： 此类为public，无参数构造器。3. 创建Java 单元测试方法。    对方法的要求：此方法为public，无参数无返回值。4. 测试方法需要加上注解：@Test，并在单元测试类导入import org.junit.Test5. 在方法体类写需要测试的方法。6. 双击单元测试方法名，run as JUnit test**<h2 id="13-包装类的使用"><a href="#13-包装类的使用" class="headerlink" title="13 包装类的使用"></a>13 包装类的使用</h2><p>![Untitled](C:\Users\Yancey\Desktop\Programming master\Java\笔记\Java\Untitled 21.png)</p><p>![Untitled](C:\Users\Yancey\Desktop\Programming master\Java\笔记\Java\Untitled 22.png)</p><blockquote><p><strong>装箱：包装类使得一个基本数据类型的数据变成了类。<br>有了类的特点，可以调用类中的方法。</strong></p></blockquote><h3 id="13-1-装箱和拆箱"><a href="#13-1-装箱和拆箱" class="headerlink" title="13.1 装箱和拆箱"></a>13.1 装箱和拆箱</h3><p><strong>装箱：把基本数据类型转化为包装类</strong></p><p><strong>拆箱：把包装类对象转化为基本数据类型</strong></p><p><strong>JDK高版本可以实现自动装箱和拆箱</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> i1 <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> i2 <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="13-2-字符串转基本数据类型"><a href="#13-2-字符串转基本数据类型" class="headerlink" title="13.2 字符串转基本数据类型"></a>13.2 <strong>字符串转基本数据类型</strong></h3><p><strong>谁转谁使用 parse+数据类型</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"1231"</span><span class="token punctuation">;</span><span class="token keyword">int</span> i1 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1231</span><span class="token class-name">String</span> trueS <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> b1 <span class="token operator">=</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token function">parseBoolean</span><span class="token punctuation">(</span>trueS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//特别的，当字符串的数据不是true时均为false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="13-3-基本数据类型变字符串"><a href="#13-3-基本数据类型变字符串" class="headerlink" title="13.3 基本数据类型变字符串"></a>13.3 <strong>基本数据类型变字符串</strong></h3><ol><li><strong>利用字符串拼接</strong></li><li><strong>利用Integer.toString</strong></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i2 <span class="token operator">=</span> <span class="token number">1234</span><span class="token punctuation">;</span><span class="token class-name">String</span> s1 <span class="token operator">=</span> i2 <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1234</span><span class="token keyword">int</span> i3 <span class="token operator">=</span> <span class="token number">2222</span><span class="token punctuation">;</span><span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>i3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="13-4-两道面试题的理解"><a href="#13-4-两道面试题的理解" class="headerlink" title="13.4 两道面试题的理解"></a>13.4 两道面试题的理解</h3><p><strong>三目运算符</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Object</span> o1 <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span><span class="token class-name">Object</span> o2<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>o2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span>o2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//o1 是 1.0 而不是1，因为三目运算符的使用需要两个条件为相同的数据类型</span><span class="token comment">//所以此处会进行自动数据类型提升</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Integer 封装类含有IntegerCache（-128~127）</strong></p><p>使用如上范围的int数据时不会重新在堆空间里面new出对应的结构，而是调用IntegerCache。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> j <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> m <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m <span class="token operator">==</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token class-name">Integer</span> x <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> y <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x <span class="token operator">==</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id=""><a href="#" class="headerlink" title=""></a></h1><hr><p><strong>永远相信美好的事情即将发生！</strong></p><p><strong>Yancey</strong></p>1635174382000</aside></aside></aside></aside></aside></aside></aside></aside></aside></aside></aside></aside></aside></aside></aside></aside></aside></aside></aside></aside></aside></aside></aside></aside></aside></aside>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络概述</title>
      <link href="/posts/10890.html"/>
      <url>/posts/10890.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>希望我们彼此在看不到的地方过的熠熠生辉。</p></blockquote><h1 id="一-、计算机网络概述"><a href="#一-、计算机网络概述" class="headerlink" title="一 、计算机网络概述"></a>一 、计算机网络概述</h1><blockquote><p><strong>思维导图</strong></p></blockquote><p><img src="https://yancey597.github.io/posts/10890/1.jpg#pic_center"></p><blockquote><p><strong>计算机网络大纲</strong></p></blockquote><p><img src="https://yancey597.github.io/posts/10890/2.jpg#pic_center"></p><h2 id="1-计算机网络的概念"><a href="#1-计算机网络的概念" class="headerlink" title="1. 计算机网络的概念"></a>1. 计算机网络的概念</h2><ul><li><strong>计算机网络：是一个将<font color="red">分散的</font>、具有<font color="red">独立功能</font>的<font color="red">计算机系统</font>，通过<font color="red">通信设备</font>(路由器等)与线路(光纤等)连接起来，由功能完善的<font color="red">软件</font>实现<font color="red">资源共享和信息传递</font>的系统。</strong></li><li><strong>计算机网络是一些互联的、自治的计算机系统的集合。</strong></li></ul><p><img src="https://yancey597.github.io/posts/10890/3.jpg#pic_center"></p><p>网络无处不在。</p><p><img src="https://yancey597.github.io/posts/10890/4.jpg#pic_center"></p><p><strong>分散的、独立的计算机系统  - - -<font color="red">通信设备、线路</font>（连接） - - - 完善的<font color="red">软件</font>- - - &gt;  资源共享、信息传递。</strong></p><h2 id="2-计算机网络的功能"><a href="#2-计算机网络的功能" class="headerlink" title="2. 计算机网络的功能"></a>2. 计算机网络的功能</h2><h3 id="2-1-数据通信"><a href="#2-1-数据通信" class="headerlink" title="2.1 数据通信"></a>2.1 数据通信</h3><ul><li><strong><font color="red">数据通信</font>是计算机网络<font color="red">最基本和最重要</font>的功能，实现联网计算机之间的各种<font color="red">信息传输</font>，并将分散在不同地理位置的计算机联系起来，进行<font color="red">统一的调配、控制和管理。</font></strong></li></ul><p><img src="https://yancey597.github.io/posts/10890/5.jpg#pic_center"></p><h3 id="2-2-资源共享"><a href="#2-2-资源共享" class="headerlink" title="2.2 资源共享"></a>2.2 资源共享</h3><ul><li><p><strong>资源共享可以是：</strong></p><p><strong><font color="red">软件共享：</font>(利用远程软件访问其他设备的软件)</strong></p><p><strong><font color="red">数据共享：</font>(百度文库、FTP等)</strong></p><p><strong><font color="red">硬件共享：</font>(网络打印机等)</strong></p></li><li><p><strong>计算机网络中的资源互通有无，分工协作，从而极大地<font color="red">提高</font>硬件资源、软件资源和数据资源的<font color="red">利用率</font>。</strong></p></li></ul><h3 id="2-3-分布式处理"><a href="#2-3-分布式处理" class="headerlink" title="2.3 分布式处理"></a>2.3 分布式处理</h3><ul><li><strong>当计算机网络中的某个计算机系统<font color="red">负荷过重</font>时，可以将其处理的某个<font color="red">复杂任务</font>分配给网络中的其它计算机系统，让它帮你处理，从而利用空闲计算机资源以<font color="red">提高</font>整个系统的<font color="red">利用率。</font></strong></li></ul><h3 id="2-4-提高了可靠性"><a href="#2-4-提高了可靠性" class="headerlink" title="2.4 *提高了可靠性"></a>2.4 *提高了可靠性</h3><ul><li><strong>因为<font color="red">分布式处理</font>的原因，计算机网络中的各台计算机可以通过网络互为替代机，当一台计算机崩了，可以让另一台计算机来完成它的工作，从而提高了<font color="red">可靠性</font>。</strong></li></ul><h3 id="2-5-负载均衡"><a href="#2-5-负载均衡" class="headerlink" title="2.5 *负载均衡"></a>2.5 *负载均衡</h3><ul><li><strong>将工作任务<font color="red">均衡</font>的分配给计算机网络中的各台计算机。</strong></li></ul><h3 id="2-6-其它应用"><a href="#2-6-其它应用" class="headerlink" title="2.6 其它应用"></a>2.6 <strong>其它应用</strong></h3><ul><li><strong>计算机网络还可以实现<font color="red">电子化</font>办公与服务、远程教育、娱乐等功能。</strong></li></ul><h2 id="3-计算机网络的组成"><a href="#3-计算机网络的组成" class="headerlink" title="3. 计算机网络的组成"></a>3. 计算机网络的组成</h2><h3 id="3-1-从组成部分来看"><a href="#3-1-从组成部分来看" class="headerlink" title="3.1 从组成部分来看"></a>3.1 从组成部分来看</h3><ul><li><strong>一个完整的计算机网络主要由<font color="red">硬件、软件和协议</font>三大部分组成，缺一不可。</strong></li><li><strong><font color="red">硬件</font>主要由<font color="red">主机</font>(也称端系统)，<font color="red">通信链路</font>(如双绞线、光纤)、<font color="red">交换设备</font>(如路由、交换机等)和<font color="red">通信处理机</font>(如网卡)等组成</strong></li><li><strong><font color="red">软件</font>主要包括各种实现<font color="red">资源共享</font>的软件和方便用户使用的各种<font color="red">工具软件</font>(如网络操作系统、邮件收发程序、FTP程序、聊天程序等)。</strong></li><li><strong><font color="red">协议</font>是计算机网络的核心，协议规定了网络传输数据时所<font color="red">遵循的规范</font>。就如同我们现实生活中的法律一样，网络世界也必须遵循一定的规则。</strong></li></ul><h3 id="3-2-从工作方式来看"><a href="#3-2-从工作方式来看" class="headerlink" title="3.2 从工作方式来看"></a>3.2 从工作方式来看</h3><ul><li><strong>计算机网络(主要指Internet)可分为<font color="red">边缘部分和核心部分。</font></strong></li><li><strong><font color="red">边缘部分由</font>所有连接到因特网上、供用户直接使用的<font color="red">主机</font>组成，用来进行<font color="red">通信</font>(如传输数据、音频或视频)和资源共享</strong></li><li><strong><font color="red">核心部分由</font>大量的网络和连接这些网络的<font color="red">路由器</font>组成，它为边缘部分提供连通性和交换服务。</strong></li></ul><p><img src="https://yancey597.github.io/posts/10890/6.jpg#pic_center"></p><h3 id="3-3-从功能组成来看"><a href="#3-3-从功能组成来看" class="headerlink" title="3.3 从功能组成来看"></a>3.3 从功能组成来看</h3><ul><li><p><strong>计算机网络由<font color="red">通信子网</font>和<font color="red">资源子网</font>组成</strong></p></li><li><p><strong>通信子网</strong></p><p><strong>由各种<font color="red">传输介质</font>、<font color="red">通信设备</font>和相应的<font color="red">网络协议</font>组成，它使网络具有数据传输、交换、控制和存储的能力，实现计算机之间的数据通信。</strong></p></li><li><p><strong>资源子网</strong></p><p><strong>是实现<font color="red">资源共享功能</font>的设备及其软件的集合，向网络用户提供<font color="red">共享</font>其他计算机上的<font color="red">硬件资源、软件资源和数据资源的服务。</font></strong></p><p><img src="https://yancey597.github.io/posts/10890/7.jpg#pic_center"></p></li></ul><h2 id="3-计算机网络的分类"><a href="#3-计算机网络的分类" class="headerlink" title="3.计算机网络的分类"></a>3.计算机网络的分类</h2><h3 id="3-1-按分布范围分类"><a href="#3-1-按分布范围分类" class="headerlink" title="3.1 按分布范围分类"></a>3.1 按分布范围分类</h3><ul><li><strong>广域网(<font color="red">交换</font>技术)、城域网、局域网(<font color="red">广播</font>技术)、个人区域网</strong></li></ul><p><img src="https://yancey597.github.io/posts/10890/8.jpg#pic_center"></p><p><img src="https://yancey597.github.io/posts/10890/9.jpg#pic_center"></p><h3 id="3-2-按传输技术分类"><a href="#3-2-按传输技术分类" class="headerlink" title="3.2 按传输技术分类"></a>3.2 按传输技术分类</h3><ul><li><p><strong>广播式网络</strong></p><p><strong>所有联网计算机都<font color="red">共享一个公共通信信道</font>。当一台计算机利用共享通信信道发送报文分组时，所有其他计算机<font color="red">都会收听到这个分组</font>。接受到该分组的计算机将通过检查目的地址来决定是否接受该分组。</strong></p></li><li><p><strong>点对点网络</strong></p><p><strong>每条物理线路连接<font color="red">一对</font>计算机。</strong></p></li></ul><h3 id="3-3-按拓扑结构分类"><a href="#3-3-按拓扑结构分类" class="headerlink" title="3.3 按拓扑结构分类"></a>3.3 按拓扑结构分类</h3><ul><li><strong>网络拓扑结构是指网络<font color="red">总的结点</font>（路由器、主机等）于<font color="red">通信线路</font>（网线）之间的<font color="red">几何关系</font>（如总线形、环形）表示的网路结构，主要指通信子网的拓扑结构。</strong></li><li><strong>分为四类：总线形、星形、环形、网状形</strong></li></ul><p><img src="https://yancey597.github.io/posts/10890/10.jpg#pic_center"></p><h3 id="3-4-按使用者分类"><a href="#3-4-按使用者分类" class="headerlink" title="3.4 按使用者分类"></a>3.4 按使用者分类</h3><ul><li><p><strong>公用网：中国电信、中国移动 - &gt;运营商出资建造的大型网络。</strong></p></li><li><p><strong>专用网：指某个部门为<font color="red">满足本单位</font>特殊业务需要而建造的网络。</strong></p><p><strong>使用者：军队、公司、政府机关 内网</strong></p></li></ul><p><img src="https://yancey597.github.io/posts/10890/11.jpg#pic_center"></p><h3 id="3-5-按交换技术分类"><a href="#3-5-按交换技术分类" class="headerlink" title="3.5 按交换技术分类"></a>3.5 按交换技术分类</h3><ul><li><p><strong>电路交换<font color="red">(建立一条通路、持续占用)</font></strong></p><p><strong>在源结点和目的结点之间建立起<font color="red">一条专用的通路</font>用于传输数据，包括建立连接（占用通信资源）、传输数据（一直占用通信资源）和断开连接（释放通信资源）三个阶段。最典型的电路交换网是<font color="red">传统电话网络</font>。该类网络的特点是整个报文的比特流连续的从源点直达终点，好像在一条管道中传送。</strong></p><p><img src="https://yancey597.github.io/posts/10890/12.jpg#pic_center"></p></li><li><p><strong>报文交换</strong></p></li></ul><p> <strong>也称<font color="red">存储-转发</font>网络。用户数据加上<font color="red">源地址、目的地址、校验码</font>等辅助信息，然后<font color="red">封装成报文</font>、这个报文传送到<font color="red">相邻结点</font>，全部存储后，再<font color="red">转发</font>给下一个结点，重复这一过程<font color="red">直到到达</font>目的结点，每个报文可以单独选择到达目的结点的路径。</strong></p><p><img src="https://yancey597.github.io/posts/10890/13.jpg#pic_center"></p><ul><li><strong>分组交换</strong></li></ul><p><strong><font color="red">包交换网络</font>。其原理是将数据<font color="red">分成</font>较短的固定长度的<font color="red">数据块</font>，在每个数据块中加上<font color="red">目的地址、源地址</font>等辅助信息<font color="red">组成分组</font>（包），以<font color="red">储存-转发方式传输</font>。</strong></p><p><img src="https://yancey597.github.io/posts/10890/14.jpg#pic_center"></p><ul><li><strong>三种交换的比较</strong></li></ul><p><img src="https://yancey597.github.io/posts/10890/15.jpg#pic_center"></p><h3 id="3-6-按传输介质分类"><a href="#3-6-按传输介质分类" class="headerlink" title="3.6 按传输介质分类"></a>3.6 按传输介质分类</h3><p><strong>传输介质可分为<font color="red">有线</font>和<font color="red">无线</font>两大类</strong></p><ul><li><strong>有线网络可分为双绞线网络、同轴电缆网络等。</strong></li><li><strong>无线网络可分为蓝牙、微波、无线电等类型。</strong></li></ul><hr><p><strong>永远相信美好的事情即将发生！</strong></p><p><strong>Yancey</strong></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>久违的快乐</title>
      <link href="/posts/26767.html"/>
      <url>/posts/26767.html</url>
      
        <content type="html"><![CDATA[<h1 id="久违的快乐"><a href="#久违的快乐" class="headerlink" title="久违的快乐"></a>久违的快乐</h1><blockquote><p>嗯，是时候该停下来了，要开心起来。</p></blockquote><h2 id="一、每周总结"><a href="#一、每周总结" class="headerlink" title="一、每周总结"></a>一、每周总结</h2><p><strong>计划完成情况</strong></p><ul><li><strong>早睡早起</strong><br>  基本完成了，<strong>日平均入睡时间为01:40</strong>，其实实际上就两天肝代码熬到这么晚过，总体来看入睡时间比上个星期提前了一个多小时还是有进步的。</li></ul><p><img src="https://yancey597.github.io/posts/26767/sleep.jpg#pic_center"></p><ul><li><strong>每天坚持学习</strong><br>  坚持下来啦，本周继续学习了Java，对面向对象编程又有了新的了解，相比于C语言我可能会更喜欢Java，不出意外的他将成为我的主力开发语言了。</li></ul><p><img src="https://yancey597.github.io/posts/26767/note.jpg#pic_center"></p><ul><li><strong>每天坚持锻炼</strong><br>  本周的基本锻炼量应该是达到了嘿嘿，有两次稍微远一点的骑行。第一次和两个朋友去了藏龙岛，那是一个非常美好的下午，我拍了好多好看的照片。<br><a href="https://weibo.com/5316637941/KCgLPfPtA">点击查看更多图片</a></li></ul><p><img src="https://yancey597.github.io/posts/26767/me.jpg#pic_center"></p><ul><li><strong>掌控情绪</strong><br>  基本上是做到啦(95%?)，大部分时间都是正常可控的，一旦有什么想法，会立即告诉自己停下来，大多数时候就直接停下来了，然后实在停不下来就去找朋友聊会天，然后就恢复了。依然没有关注她的任何消息，嗯，真的好多了。</li></ul><blockquote><p>我爸妈有看我博客的习惯，但我不会因为这个就写假话，博客的意义就是说真话，所以您二位放心吧，我真的好多了。</p></blockquote><hr><h2 id="二、下周计划"><a href="#二、下周计划" class="headerlink" title="二、下周计划"></a>二、下周计划</h2><ul><li><strong>丢火车Livehouse</strong></li></ul><p>  喜欢丢火车已经很久很久啦，一直想去现场见他们，前学生时代没时间没精力一直没能实现。</p><p><img src="https://yancey597.github.io/posts/26767/yc.jpg#pic_center"></p><p><img src="https://yancey597.github.io/posts/26767/picket.jpg#pic_center"></p><p>  最近恶补了丢火车的所有专辑，每一首歌真的是倒唱如流~还是第一次去Livehouse，这两天得抓紧预习下，避免显得自己是个萌新哈哈哈哈。知道宜昌有巡演后真的是期待了一个暑假，如今巡演就这么来了，马上就能见到你们了。尽管提到宜昌会有点小小的失落，朋友也说让我别去。但错过这次不知道又要等多久，真的不能再错过这次了！</p><p><img src="https://yancey597.github.io/posts/26767/gedan.jpg#pic_center"></p><p><img src="https://yancey597.github.io/posts/26767/gedan1.jpg#pic_center"></p><ul><li><strong>日常学习</strong></li></ul><p>  本周争取再看200集宋红康老师的课，把几个项目都做一做，不能偷懒。</p><p><img src="https://yancey597.github.io/posts/26767/java.jpg#pic_center"></p><p>  把乐理再捡起来，成为独立音乐人那也曾是17岁少年的梦想，这么多年也算是写了两张让自己满意而且能入选银河计划的专辑，但没等到发布，歌曲的主角离开了。MCN那边知道我的情况后还是挺尊重我的，也没有再催我了，我也在犹豫还要不要再发出来。</p><p><img src="https://yancey597.github.io/posts/26767/song.jpg#pic_center"></p><ul><li><strong>早睡早起</strong></li></ul><p>  争取把入睡时间再往前提一个小时，希望几个星期后差不多接近正常作息：23:00之前。</p><ul><li><strong>坚持锻炼</strong></li></ul><p>  坚持锻炼是一个长期的过程，希望能和上学期一样每天坚持吧，尽管天气变冷了….</p><ul><li><strong>掌控情绪</strong></li></ul><p>  这个没啥好说的其实，不开心的时候有朋友来找直接告诉对方不开心就行，别再摆个臭脸了。</p><hr><h2 id="三、一些感受"><a href="#三、一些感受" class="headerlink" title="三、一些感受"></a>三、一些感受</h2><h3 id="夜间骑行"><a href="#夜间骑行" class="headerlink" title="夜间骑行"></a>夜间骑行</h3><p>  本周的第二次骑行——晚上一个人不开导航漫无目的的往前骑。本来在寝室待着准备刷会知乎，突然冒出来这个奇奇怪怪的想法。不知道自己要到哪去，但还是穿上衣服就出发了，出去骑车锻炼锻炼总比宅在宿舍好吧，<strong>得动起来，然后再去找寻意义：</strong>“我将不顾一切的来到这地方”。</p><p><img src="https://yancey597.github.io/posts/26767/dhc.jpg#pic_center"></p><p>  看着路灯下自己影子被拉长到消失，感受脸颊被带着些许寒意的冷风轻轻拂过，看着穿行在城市大道上的行色匆匆的人们，每个人都朝着更好的生活前进着……骑了不知道多久，也没有刻意控制方向。</p><p><img src="https://yancey597.github.io/posts/26767/road.jpg#pic_center"></p><p>  奇妙的是兜兜转转又回到了学校，哈哈哈哈哈哈哈，这就是生活的意义吧，<strong>我们一生中都在不停的遇见和道别，尽管讨厌再见，但不能失去去追寻美好、说”你好”的勇气</strong>。而且离开也不完全是坏事呀，或许在未来的某个时刻，<strong>曾经走散的人又会兜兜转转的、以一个更好的自己、以一种更好的方式再次相见呢。</strong></p><p><img src="https://yancey597.github.io/posts/26767/life.jpg#pic_center"></p><p><strong>“日常生活中的美好瞬间，便足以支撑起人生的全部意义。”</strong></p><hr><h3 id="享受独处但不拒绝同行"><a href="#享受独处但不拒绝同行" class="headerlink" title="享受独处但不拒绝同行"></a>享受独处但不拒绝同行</h3><p>  前面一段时间，基本上把自己整个人算是封闭起来了，啥活动都不想参加，有朋友叫着出去玩也不想去，整个人待宿舍一直逼自己肝项目，美曰：爱学习，实在无聊就弹会吉他。现在回头看看真的就是单纯想逃避罢了…….这段时间身边的朋友一直陪我一起承受着负面情绪开导我，我会好起来的，然后昨天去聚餐就是一个好的开始吧。</p><p><img src="https://yancey597.github.io/posts/26767/weibo.jpg#pic_center"></p><p>  <strong>他们对我说的最多的话抽象出来其实是做正确的选择和对的选择</strong>，但这种事情有绝对的正确和错误吗？</p><p>  开学刚报道认识我的很多人都以为我和… 在一起了哈哈哈哈，然后现在把自己搞这么难堪，他们是<strong>一边嘲笑一边安慰我</strong>：让我晚上不要做决定 ……..省略一万字。</p><p>  道理我都懂，我也知道他们的本意都是想让我好，哈哈哈还有他们上学期吃了一学期的瓜，我真没意识到表现的有这么明显吗？到头来好像就我一个人是局外人，直到他们一条条列举出来一条条鞭尸，笑死。</p><p>  现在又出了这么个事，抛开刚才那些，大家都迫不及待想看大结局了。<strong>但现阶段其实对我最重要的不是立即再找一个人来填补内心的空缺，反思总结提升改变自己才是最重要的</strong>，我也不至于缺爱到这种程度。而且我也不知道我现在是个什么想法，是不是真的喜欢她或者是放不下，放不下就是放不下，真的不能逼自己了，<strong>只能是顺其自然、交给时间，相比于再谈一次，我更愿意把一切交给时间。</strong>再说这也不是一厢情愿的事，这些都只能等我能以一种平和的心态来面对她再说吧。她之前也知道我“喜欢她”的，所以现在见面有时候我都觉得挺尴尬，有时候不知道该说什么，毛xx每次又故意刺激我，md昨天聚餐因为这个让我多喝了几杯！！   </p><p><strong>最后的最后，还是开头的那句话：消极的情绪放一放、停一停，顺其自然，交给时间，要开心点。</strong></p><hr><p><strong>永远相信美好的事情即将发生！</strong></p><p><strong>Yancey</strong><br><strong>2021.10.19 10:00</strong></p>]]></content>
      
      
      <categories>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 周记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java流程控制和数组</title>
      <link href="/posts/2006.html"/>
      <url>/posts/2006.html</url>
      
        <content type="html"><![CDATA[<h1 id="三-流程控制"><a href="#三-流程控制" class="headerlink" title="三. 流程控制"></a>三. 流程控制</h1><blockquote><p><strong>三种基本流程结构</strong></p></blockquote><p><strong>顺序结构<br>选择结构<br>循环结构</strong></p><h2 id="1-选择结构"><a href="#1-选择结构" class="headerlink" title="1. 选择结构"></a>1. 选择结构</h2><blockquote><p><strong>条件表达式必须是布尔表达式（关系表达式或逻辑表达式）、布尔变量。</strong></p></blockquote><p><strong>if - else 就近配对</strong></p><h2 id="2-Scanner类的使用"><a href="#2-Scanner类的使用" class="headerlink" title="2. Scanner类的使用"></a>2. Scanner类的使用</h2><blockquote><p>从键盘获取不同类型的变量</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token comment">//1. 导包</span><span class="token keyword">class</span> <span class="token class-name">ScannerTest</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">Scanner</span> scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2. 实例化</span><span class="token keyword">int</span> num <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3. 调用方法获取变量next();nextXxxx();</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-Math-random生成随机数"><a href="#3-Math-random生成随机数" class="headerlink" title="3. Math.random生成随机数"></a>3. Math.random生成随机数</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> score <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token comment">//random() -&gt; </span><span class="token comment">//random -&gt; 生成double类型的随机数 -&gt; [0.0,1.0)</span><span class="token comment">//可以由此变化出任意范围的随机数。</span><span class="token comment">//公式:[a,b] : (int)Math.random() *(b - a + 1 ) + a</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-Switch-case语法"><a href="#4-Switch-case语法" class="headerlink" title="4. Switch-case语法"></a>4. Switch-case语法</h2><p><strong>Switch (表达式)：</strong> <strong>Byte、short、char、int、枚举类型(JDK5.0新增)、String(JDK7.0新增)</strong></p><h2 id="5-循环结构"><a href="#5-循环结构" class="headerlink" title="5. 循环结构"></a>5. 循环结构</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">label<span class="token operator">:</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">continue</span> label<span class="token punctuation">;</span><span class="token comment">//使用加标签的方式可以结束指定的循环</span><span class="token comment">//break label; </span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">continue</span> <span class="token comment">//跳转到循环的自增；</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="四-数组"><a href="#四-数组" class="headerlink" title="四. 数组"></a>四. 数组</h1><blockquote><p><strong>数组(Array)，是多个相同类型数据按一定顺序排列的集合，并使用一个名字命名，并通过编号的方式对这些数据进行统一管理。</strong></p></blockquote><p><strong>特性</strong></p><blockquote><p>数组名<br>角标、下标(或索引)<br>元素<br>数组的长度：元素的个数<br>引用类型的变量</p></blockquote><h2 id="1-一维数组"><a href="#1-一维数组" class="headerlink" title="1. 一维数组"></a>1. 一维数组</h2><h3 id="1-1-数组声明"><a href="#1-1-数组声明" class="headerlink" title="1.1 数组声明"></a>1.1 数组声明</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ids <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1001</span><span class="token punctuation">,</span><span class="token number">1002</span><span class="token punctuation">,</span><span class="token number">1003</span><span class="token punctuation">,</span><span class="token number">1004</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//数组的声明；</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-2-数组长度"><a href="#1-2-数组长度" class="headerlink" title="1.2 数组长度"></a>1.2 数组长度</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>names<span class="token punctuation">.</span>length<span class="token comment">//获取数组长度</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-3-数组默认初始化值"><a href="#1-3-数组默认初始化值" class="headerlink" title="1.3 数组默认初始化值"></a>1.3 数组默认初始化值</h3><p><strong>int：0<br>double：0.0<br>String：<br>Char：(/u0000)<br>Bool：false<br>引用类型：null</strong></p><h3 id="1-4-内存结构解析"><a href="#1-4-内存结构解析" class="headerlink" title="1.4 内存结构解析*"></a>1.4 内存结构解析*</h3><p><img src="https://yancey597.github.io/posts/2006/1.jpg"></p><p>**堆、栈、方法区<br>堆：heap<br>存放着new出来的结构：对象、数组。</p><p>栈：stack<br>存放着局部变量：声明的一些变量。</p><p>方法区：method area<br>常量池：字符串<br>静态域：static<br>类加载的信息**</p><h3 id="1-5-内存实例解析"><a href="#1-5-内存实例解析" class="headerlink" title="1.5 内存实例解析"></a>1.5 内存<strong>实例解析</strong></h3><p><img src="https://yancey597.github.io/posts/2006/2.jpg"></p><hr><blockquote><p><strong>我的理解：<br>堆存放数据，栈存放堆的地址。</strong></p></blockquote><h2 id="2-二维数组"><a href="#2-二维数组" class="headerlink" title="2. 二维数组"></a>2. 二维数组</h2><h3 id="2-1-二维数组声明"><a href="#2-1-二维数组声明" class="headerlink" title="2.1 二维数组声明"></a>2.1 二维数组声明</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">123</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//二维数组的声明及初始化；</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-二维数组长度"><a href="#2-2-二维数组长度" class="headerlink" title="2.2 二维数组长度"></a>2.2 二维数组长度</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>arr4<span class="token punctuation">.</span>length  <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>arr4<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-3-二维数组默认初始化值"><a href="#2-3-二维数组默认初始化值" class="headerlink" title="2.3 二维数组默认初始化值"></a>2.3 二维数组默认初始化值</h3><p><strong>外层初始化值为地址值<br>内层初始化值为一维数组值相同。</strong></p><p><strong>[3][ ]//未指定第二个参数<br>[3] → null;</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//地址</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-4-二维数组内存分析"><a href="#2-4-二维数组内存分析" class="headerlink" title="2.4 二维数组内存分析"></a>2.4 二维数组内存分析</h3><p><img src="https://yancey597.github.io/posts/2006/3.jpg"></p><h2 id="3-数据结构"><a href="#3-数据结构" class="headerlink" title="3. 数据结构"></a>3. 数据结构</h2><p><strong>1.数据与数据之间的逻辑关系：</strong><br>集合、一对一、一对多、多对多</p><p><strong>2.数据的存储结构:</strong><br>线性表：顺序表（比如:数组)、链表、栈、队列<br>树形结构：二叉树<br>图形结构：</p><p><strong>算法：</strong></p><h2 id="4-数组的算法"><a href="#4-数组的算法" class="headerlink" title="4. 数组的算法"></a>4. 数组的算法</h2><p><strong>数组的遍历，赋值，复制，反转<br>数组的查找、排序</strong></p><h3 id="4-1-查找"><a href="#4-1-查找" class="headerlink" title="4.1 查找"></a>4.1 查找</h3><p><strong>二分法查找：</strong><br><strong>前提：所要查找的数组必须有序</strong>。</p><h3 id="4-2-排序"><a href="#4-2-排序" class="headerlink" title="4.2 排序"></a>4.2 排序</h3><p><strong>评价排序算法的好坏</strong></p><p><strong>1.时间复杂度<br>2.空间复杂度<br>3.稳定性：两个记录的关键字相等，但不改变他们的位置关系</strong></p><p><strong>选择算法的分类</strong></p><p><strong>选择排序：</strong></p><blockquote><p><strong>直接选择排序、堆排序</strong></p></blockquote><p><strong>交换排序：</strong></p><blockquote><p><strong>冒泡排序、快速排序</strong></p></blockquote><p><strong>插入排序：</strong></p><blockquote><p><strong>直接插入排序、折半插入排序、Shell排序</strong></p></blockquote><p><strong>归并排序、桶式排序</strong></p><p><strong>算法的特性</strong></p><p><strong>输入</strong> (Input )<br><strong>输出</strong> (Output)<br><strong>有穷性</strong> (有限性，Finiteness)<br><strong>确定性</strong>(明确性，Definiteness )<br><strong>可行性</strong>（有效性，Effectiveness)</p><h3 id="4-3-排序算法横比"><a href="#4-3-排序算法横比" class="headerlink" title="4.3 排序算法横比"></a>4.3 排序算法横比</h3><p><img src="https://yancey597.github.io/posts/2006/4.jpg"></p><p><img src="https://yancey597.github.io/posts/2006/5.jpg"></p><h3 id="4-4-数组工具类Arrays的使用"><a href="#4-4-数组工具类Arrays的使用" class="headerlink" title="4.4 数组工具类Arrays的使用"></a>4.4 数组工具类Arrays的使用</h3><ol><li><strong>判断两个数组是否相等：Boolean equals(int[] a, int[] b)</strong></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">Boolean</span> isEquals <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>isEquals<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li><strong>遍历数组：String toString(int[] a)</strong></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[1,3,4,2]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li><strong>填充数组: void fill(int[] a, int val)</strong></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2,2,2,2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li><strong>排序数组：void sort(int[] a)</strong></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1,2,3,4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li><strong>二分查找  [有序]  数组元素：int binarySearch(int[] a, int key)</strong> </li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-5-数组常见错误"><a href="#4-5-数组常见错误" class="headerlink" title="4.5 数组常见错误"></a>4.5 数组常见错误</h3><ol><li><strong>数组角标越界</strong></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//error;</span><span class="token comment">// ArrayIndexOutOfBoundsException</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li><strong>空指针异常</strong></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//error</span><span class="token comment">//NullPointerException</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><p><strong>永远相信美好的事情即将发生！</strong></p><p><strong>Yancey</strong><br><strong>2021-10-17 10:17:01</strong></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>呼兰</title>
      <link href="/posts/43964.html"/>
      <url>/posts/43964.html</url>
      
        <content type="html"><![CDATA[<h1 id="某某与我——呼兰"><a href="#某某与我——呼兰" class="headerlink" title="某某与我——呼兰"></a>某某与我——呼兰</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>“笑，是生活的麻药；温柔地打碎笑的幻觉，大概也就是这样了。”</p></blockquote><p><img src="https://yancey597.github.io/posts/43964/1.jpg#pic_center"></p><p>  因为上面这些句话，呼兰上热搜了。呼兰——毕业于哥伦比亚大学精算系，<strong>学霸</strong>是他身上最鲜明的标签。王建国认为他是公司智商最高的人，李诞、程璐对他的智商与学习能力都给出了极高的评价。因为喜欢脱口秀大会的原因，所以我对他也非常了解，同时他也是我非常喜爱的选手之一。</p><p>  <img src="https://yancey597.github.io/posts/43964/cover.jpg#pic_center"></p><p>  <strong>关于呼兰的介绍就不多说了感兴趣的可以移步他的微博或者自行搜索。</strong></p><p>  <a href="https://weibo.com/u/1794698917">呼兰的微博</a></p><hr><h2 id="我的感想"><a href="#我的感想" class="headerlink" title="我的感想"></a>我的感想</h2><p><img src="https://yancey597.github.io/posts/43964/cover1.jpg#pic_center"></p><blockquote><p>1.每一部分你的经历你的影响都融在你的骨子里面，这些经历或多或少都促使你成为现在这么一个人。</p></blockquote><p>  其实人生中<strong>每一段经历对现在自我形成的影响都大</strong>，每一段经历都是必不可少的。我们没有办法去倒推说如果没有这段经历你会成为什么样子，所以我们不要去回想曾经的某个结点我如果做了什么，后来会是什么样子。我们能做的就是解决还没解决的问题，目光放的长远一点。</p><p><img src="https://yancey597.github.io/posts/43964/2.jpg#pic_center"></p><blockquote><p>2.创作是进无止境的，你可以看到一个天赋极高、能力极强的人，也是孜孜不倦的。</p></blockquote><p>  被创作所驱动的人，是发光的；被兴趣所驱动的人也是会发光的，那种对现状不满，发誓要改变的动力也是极强的。这里提一个我喜欢一加的原因，<strong>“1”代表的是“现状”，“+”则代表的是“更好和更多的可能性。</strong></p><p><img src="https://yancey597.github.io/posts/43964/oneplus.jpg#pic_center"></p><blockquote><p>3.有的时候我听到我去年说的一些话会感到羞愧和羞耻。如果一个人拿着你去年、几年前的一些东西在洋洋得意的话，那你这几年在干啥呢？</p></blockquote><p>  这句话真是醍醐灌顶，面对生活中的一些不如意的时候，我经常会去想曾经的自己——那个拥有美好未来最好年纪的自己，也经常和身边的人讲之前的事，<strong>现在想起来真是羞愧万分。</strong>，当然现在改变也不晚，加油！</p><blockquote><p>4.不要把解决问题当成你的使命，能改变一些当然最好，如果是奔着解决问题去的，你是会幻灭的。</p></blockquote><p>   如果抱着解决问题的态度去做事，在你真正开始行动之前，你可能就会觉得说<strong>做这件事是无用的、定义为没有意义的事</strong>，其实不需要这样，让现状变好一点就可以了。我想起了之前老罗语录的一句话：<strong>每一个生命来到这世界，都注定要改变这个世界，你别无选择，如果你做一个好人，这个世界就因为你变得美好了一点点</strong>。<br><img src="https://yancey597.github.io/posts/43964/lyh.jpg#pic_center"></p><p>   所以放手去做吧，去完成那些年少的梦、那些一直想做但没有做的事情，不要纠结于结果，也不要害怕失去。这里插一句丢火车的歌词：”我将不顾一切的，来到这地方。”</p><p><img src="https://yancey597.github.io/posts/43964/dhc.jpg#pic_center"></p><blockquote><p>5.一点点来，边走边想，走起来才知道方向对不对，但不能停留，不要站在原地去找意义。<br>6.做完了一件事再去赋予意义，什么都不做，他是不会存在意义的。</p></blockquote><p>   这两句话更像是对上一句话的继承，要行动起来，不能留在原地去找寻，要在行动中去找寻意义，想到这里其实想说的话特别特别多，偏哲学问题了。害，就先说这些吧，毕竟懂和做到，<strong>也就是”知行合一“的境界太难了，这应该是我们用一生为之奋斗的目标。</strong></p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://yancey597.github.io/posts/43964/jy.jpg#pic_center"></h2><p><strong>永远相信美好的事情即将发生！</strong><br><strong>Yancey</strong><br><strong>2021-10-13 23:43:01</strong></p>]]></content>
      
      
      <categories>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 观后感 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>思考与勇气</title>
      <link href="/posts/51864.html"/>
      <url>/posts/51864.html</url>
      
        <content type="html"><![CDATA[<h1 id="思考与勇气"><a href="#思考与勇气" class="headerlink" title="思考与勇气"></a>思考与勇气</h1><blockquote><p>向内生根才能向外发散，唯有勇气，才是照亮你的那束光。</p></blockquote><h2 id="一、每周总结"><a href="#一、每周总结" class="headerlink" title="一、每周总结"></a>一、每周总结</h2><h3 id="1-计划完成情况"><a href="#1-计划完成情况" class="headerlink" title="1. 计划完成情况"></a>1. 计划完成情况</h3><ul><li><input disabled="" type="checkbox"> <strong>早睡早起</strong></li></ul><p>  未完成，周平均入睡时间为02:34(害怕)。</p><p>  <img src="https://yancey597.github.io/posts/51864/sleep.jpg#pic_center"></p><p>  前几天在忙博客的搭建，一写起来就忘记了时间，不看时间还好，一看就是三更半夜了。上床之后再逛逛微博、知乎随随便便就三四点，一觉睡醒就快中午了，还不愿意起床。知乎有毒！</p><ul><li><input checked="" disabled="" type="checkbox"> <strong>每天坚持学习</strong></li></ul><p>  基本完成了，每天学习时间至少有<strong>5个小时</strong>且收获很大。</p><p>  <img src="https://yancey597.github.io/posts/51864/study.jpg#pic_center"></p><p>  这个星期决定从0开始系统的学习了Java编程语言，尚硅谷的宋红康老师yyds。非常适合有编程基础的同学学习，老师能够深入浅出的讲解每一个知识点，和平时上课只知道念PPT的老师相比学习效率高多了，果然大学还是得靠自学。</p><ul><li><input disabled="" type="checkbox"> <strong>每天坚持锻炼</strong></li></ul><p>  每晚骑车的计划只坚持了两天，武汉这鬼天气嗷，夏天到秋天真的只要一晚上，给我冻傻了都！骑车的时候还被导航软件给坑了，直接把我往家里面导，即将达成成就：一晚上骑行550km！</p><p>  <img src="https://yancey597.github.io/posts/51864/circling.jpg#pic_center"></p><ul><li><input checked="" disabled="" type="checkbox"> <strong>减少emo</strong></li></ul><p>  这周emo的次数相比上周好了太多了，上个星期基本上全天emo，啥都干不了，一到下午就感觉跟要死了一样。本周可以做一些自己的事了，整个人也挺精神不少。也没有去关注她的任何消息，不知道是不是太克制了，昨天晚上梦到她了，今天早上一觉醒来怅然若失的感觉席卷而来，emo了半小时。</p><h3 id="2-下周计划"><a href="#2-下周计划" class="headerlink" title="2. 下周计划"></a>2. 下周计划</h3><ul><li><p><strong>早睡早起</strong><br>  把所有工作移到白天完成，在22:30以后尽量不触碰电子设备，把很久之前的书拿出来看看，尝试在23:00准时休息。</p></li><li><p><strong>坚持学习</strong></p></li></ul><p>  数据结构、Java、数据库、JS、计算机科学、英语、乐理。<br>  合理分配好时间，确保每天都学习，利用好Notion做好笔记并按时复习，循序渐进的去学习，<strong>每天总结当天学习成果</strong>。</p><ul><li><input disabled="" type="checkbox"> <strong>坚持锻炼</strong></li></ul><p>  上个星期定的每天坚持骑车其实是不现实的，这个星期尝试跑步，间隔着去骑车，尽量把时间移到白天，晚上太冷了骑车可能感冒。</p><ul><li><input disabled="" type="checkbox"> <strong>掌控情绪</strong></li></ul><p>  可以emo，不要去压制内心的想法，去接纳消极的情绪，emo的时候可以跟朋友多交流交流，不要封闭自己。</p><h2 id="二、对自己的一些思考"><a href="#二、对自己的一些思考" class="headerlink" title="二、对自己的一些思考"></a>二、对自己的一些思考</h2><h3 id="1-断舍离"><a href="#1-断舍离" class="headerlink" title="1. 断舍离"></a>1. 断舍离</h3><blockquote><p>你如果可以把很多问题的答案明确，那其他关系对你来说就真的没有那么重要。同时也知道那些关系是对自己真正重要的人。</p></blockquote><p>  在一次emo之后，突然顿悟了，知道自己想要的到底是什么东西，对自己有了更清晰的定位，也再次明确了自己的发展方向。本周我开始专注向内了，减少了绝大多数的无效社交，专注提升自己。</p><h3 id="2-这个世界有多美好"><a href="#2-这个世界有多美好" class="headerlink" title="2. 这个世界有多美好"></a>2. 这个世界有多美好</h3><blockquote><p>在这个庞大的世界里，你所能知道的事情渺小得微不足道。但幸运的是你要知道你该爱的人 该对谁好 该弥补谁，你要知道不该用敌对的目光看待他人 看待世界，你将会明白这个世界有多么的美好。</p></blockquote><p>  为什么感觉到活着累呢，首先是没有目标，不知道自己想要的到底是什么，或者是在朝着目标奋力前进时，被在社会赋予的各种KPI压倒，反而忘记了生活真正的意义——生活本身。</p><p>  活着的真正意义，就藏在我们看似每天都看似平淡无奇的生活中——那些在你看来习以为常的东西，日常生活的美好瞬间，便足以支撑起人生的所有意义。</p><p>  当你一直前进，不知道已经走出多久的时候，可以停下脚步，你会感受到微风吹拂。走记得抬头看看，那里有阳光与星空，也有未知和无限的可能。</p><h3 id="3-合理接纳负面情绪"><a href="#3-合理接纳负面情绪" class="headerlink" title="3.合理接纳负面情绪"></a>3.合理接纳负面情绪</h3><h4 id="1-接纳自己的情绪和感受"><a href="#1-接纳自己的情绪和感受" class="headerlink" title="1.接纳自己的情绪和感受"></a><strong>1.接纳自己的情绪和感受</strong></h4><p>  与其压抑让自己不开心的情绪和感受，不如尝试在内心为它们腾出更多的空间。因为每一种情绪都有着关于我们自身的信息，我们可以去思考这些情绪和感受在告诉什么，在其背后究竟是什么。</p><p><strong>不要去压抑这种感受，而是让它在内心存在，这样反而会受到更少的侵扰。</strong></p><h4 id="2-与当下的生活进行联结"><a href="#2-与当下的生活进行联结" class="headerlink" title="2.与当下的生活进行联结"></a>2.与当下的生活进行联结</h4><p>  反思过去和规划未来固然重要，但当下的生活同样值得我们投入和感受。我们可以从观察周围的环境开始，练习一种“活在当下”的习惯：认真看看身边的东西，它们的颜色和纹理；摸一摸它们，感受不同的触感。</p><h4 id="3-明确自己真正认可的价值"><a href="#3-明确自己真正认可的价值" class="headerlink" title="3.明确自己真正认可的价值"></a>3.明确自己真正认可的价值</h4><p>  与其纠结于自身是否快乐幸福，不如想着去过自己认可的生活。在这个过程中，我们会感到开心，也会感到难过和烦躁。这些都是生活真实的面向，也是生而为人真实的模样。</p><hr><p><strong>永远相信美好的事情即将发生！</strong></p><p><strong>Yancey</strong><br><strong>2021-10-10 17:11:01</strong></p>]]></content>
      
      
      <categories>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 周记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基本语法</title>
      <link href="/posts/22710.html"/>
      <url>/posts/22710.html</url>
      
        <content type="html"><![CDATA[<h1 id="二、Java基础语法"><a href="#二、Java基础语法" class="headerlink" title="二、Java基础语法"></a>二、Java基础语法</h1><h2 id="1-关键字保留字"><a href="#1-关键字保留字" class="headerlink" title="1. 关键字保留字"></a>1. 关键字保留字</h2><h3 id="1-1-关键字的定义与特点"><a href="#1-1-关键字的定义与特点" class="headerlink" title="1.1 关键字的定义与特点"></a>1.1 关键字的定义与特点</h3><p><strong>定义：</strong>Java中被赋予特殊含义，用做专门用途的字符串。</p><p><strong>特点：</strong>全为小写。</p><h3 id="1-2-保留字"><a href="#1-2-保留字" class="headerlink" title="1.2 保留字"></a>1.2 保留字</h3><p><strong>定义：</strong>Java保留字:现有Java版本尚未使用，但以后版本可能会作为关键字。</p><p><strong>goto、const。</strong></p><h2 id="2-标识符"><a href="#2-标识符" class="headerlink" title="2. 标识符"></a>2. 标识符</h2><h3 id="2-1-标识符定义"><a href="#2-1-标识符定义" class="headerlink" title="2.1 标识符定义"></a>2.1 标识符定义</h3><blockquote><p>Java对各种<strong>变量、方法和类等要素</strong>命名时使用的字符序列称为标识符。</p></blockquote><blockquote><p><strong><font color="red">凡是可以自己起名字的地方都叫标识符</font></strong></p></blockquote><h3 id="2-2-标识符命名规则"><a href="#2-2-标识符命名规则" class="headerlink" title="2.2 标识符命名规则"></a>2.2 标识符命名规则</h3><blockquote><p>由<strong> <font color="red">数字、字母、下划线、$</font> </strong>组成。<br>不能以数字开头，不能有空格。<br>不能使用关键字或保留字，但可以包含。<br>区分大小写。</p></blockquote><h3 id="2-3-标识符命名规范"><a href="#2-3-标识符命名规范" class="headerlink" title="2.3 标识符命名规范"></a>2.3 标识符命名规范</h3><p><strong>包名：</strong>多字母<strong>所有字母小写。</strong><br><strong>类名、接口名：多</strong>单词<strong> <font color="red">每个单词首字母大写</font> </strong>（驼峰）<br><strong>变量名、方法名：</strong>多单词<strong>首字母小写</strong>，其他大写（小驼峰）<br><strong>常量名：多单词大写，下划线分隔</strong><br><strong>要能够见名知义<br>Java 采用Unicode编码，可以用汉字声明，但不建议。</strong></p><h2 id="3-变量"><a href="#3-变量" class="headerlink" title="3. 变量"></a>3. 变量</h2><h3 id="3-1-变量的概念"><a href="#3-1-变量的概念" class="headerlink" title="3.1 变量的概念"></a>3.1 变量的概念</h3><p><strong>变量是程序中</strong><strong> <font color="red">最基本的存储单元</font> </strong>。<br><strong>包含</strong> <strong> <font color="red">变量类型、变量名和存储的值。<br>变量作用域：{}。</font> </strong></p><h3 id="3-2-变量类型"><a href="#3-2-变量类型" class="headerlink" title="3.2 变量类型"></a>3.2 变量类型</h3><p><strong>按数据类型来分：</strong></p><ol><li><p><strong>基本数据类型</strong></p><ol><li><strong>数值型</strong><ol><li>整数类型(byte,short,int,long)</li><li>浮点类型(float,double)</li></ol></li><li><strong>字符型</strong>(char)</li><li><strong>布尔型</strong>(boolean)</li></ol></li><li><p><strong>引用数据类型</strong></p><ol><li>类(class) <strong>字符串在这</strong></li><li>接口(interface)</li><li>数组(array)</li></ol><p> <strong>按变量在类中声明的位置来分</strong></p></li></ol><p>成员变量 vs 局部变量</p><h3 id="3-3-整数类型"><a href="#3-3-整数类型" class="headerlink" title="3.3 整数类型"></a>3.3 整数类型</h3><p>Java的整型常量<strong>默认为 int型</strong> ,声明long类型需要<strong>加”l或L”。</strong></p><h3 id="3-4-浮点类型"><a href="#3-4-浮点类型" class="headerlink" title="3.4 浮点类型"></a>3.4 浮点类型</h3><p>Java的浮点型常量<strong>默认为double型</strong>，声明float型常量，<strong>须后加‘f’或‘F’。</strong></p><p>float表示数值的范围比long还大，因为浮点数在存储中是<strong>以小数加幂的方式</strong>存储</p><h3 id="3-5-字符类型"><a href="#3-5-字符类型" class="headerlink" title="3.5 字符类型"></a>3.5 字符类型</h3><p>Java中的所有字符<strong>都使用Unicode编码</strong>,所以一个字符可以表示字母、汉字或其他书面语的一个字符。</p><p>也可以用 Unicode值来表示，<strong>\uxxxx</strong>表示一个十六进制整数。</p><h3 id="3-6-Boolean类型"><a href="#3-6-Boolean类型" class="headerlink" title="3.6 Boolean类型"></a><strong>3.6 Boolean类型</strong></h3><p>只能取<strong>true、false</strong>。用于条件判断、循环结构。</p><h3 id="3-7-数值类型转换"><a href="#3-7-数值类型转换" class="headerlink" title="3.7 数值类型转换"></a>3.7 数值类型转换</h3><p><strong>除了Boolean类型的基本数据类型</strong></p><ol><li><p><strong>自动类型转换</strong></p><p> <strong>(byte、short、char)</strong> → int → long → float → double <strong>低精度 → 高精度</strong></p><p> 当byte、char、short 三种类型变量运算时，结果是<strong>int</strong>型。</p><blockquote><p><strong>很重要！！！！</strong></p></blockquote></li><li><p><strong>强制类型转换</strong></p><p> <strong>自动类型转换的逆运算</strong></p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">double</span> demo <span class="token operator">=</span> <span class="token number">12.9</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>demo<span class="token punctuation">;</span><span class="token comment">//向下取整，会造成精度损失</span><span class="token comment">//一个小细节</span><span class="token keyword">long</span> l <span class="token operator">=</span> <span class="token number">123123</span><span class="token punctuation">;</span><span class="token comment">//没有L，可以编译；</span><span class="token comment">//右边默认是一个int类型, 赋值给一个long自动类型转换；</span><span class="token keyword">float</span> l <span class="token operator">=</span> <span class="token number">12.9</span><span class="token punctuation">;</span><span class="token comment">//没有f，编译报错；</span><span class="token comment">//右边默认是一个double类型，赋值给float可能会精度损失，需要强制类型转换。</span><span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">1</span>；<span class="token keyword">byte</span> c <span class="token operator">=</span> b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//同样报错，原因与上述相同。 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-8-字符串类型-String"><a href="#3-8-字符串类型-String" class="headerlink" title="3.8 字符串类型(String)"></a>3.8 字符串类型(String)</h3></li><li><p>String属于<strong>引用数据</strong>类型。</p></li><li><p>声明String类型变量时,使用**一对””**。</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment">//可以为空</span><span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token string">''</span><span class="token comment">//报错</span><span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">;</span><span class="token comment">//可以</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li>String<strong>可以和8种基本数据</strong>类型做运算，<strong>只能做连接运算：+ 结果仍然是String类型</strong></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">101</span><span class="token punctuation">;</span><span class="token class-name">String</span> numberStr <span class="token operator">=</span>“学号<span class="token operator">:</span>"<span class="token punctuation">;</span><span class="token class-name">String</span> info <span class="token operator">=</span> numberStr <span class="token operator">+</span> number<span class="token punctuation">;</span>system<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Java中 + 的运算是<strong>从左到右</strong>。</p><ol><li>字符串<strong>不能直接参与基本数据类型的赋值</strong>，也<strong>不能强制类型转换。</strong></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//可以使用Integer.parseInt把字符串转换为int</span>system<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4-进制转换"><a href="#4-进制转换" class="headerlink" title="4. 进制转换"></a>4. 进制转换</h2><blockquote><p><strong>世界上有10种人 ，认识和不认识二进制的。</strong></p></blockquote><h3 id="4-1-进制的表示"><a href="#4-1-进制的表示" class="headerlink" title="4.1 进制的表示"></a>4.1 进制的表示</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">0b111</span><span class="token punctuation">;</span><span class="token comment">//二进制以0b/0B开头</span><span class="token number">061</span><span class="token punctuation">;</span><span class="token comment">//八进制以0开头</span><span class="token number">0x71</span><span class="token punctuation">;</span><span class="token comment">//十六进制以0x/0X开头</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-2-二进制整数的形式"><a href="#4-2-二进制整数的形式" class="headerlink" title="4.2 二进制整数的形式"></a>4.2 二进制整数的形式</h3><blockquote><p><strong>二进制的整数有如下三种形式：</strong></p></blockquote><p><strong> <font color="red">正数的原码反码补码：</font> </strong>直接将一个数值换成二进制数。最高位是符号位。</p><p><strong> <font color="red">负数的反码</font> </strong>：是对<strong>原码按位取反</strong>，最高位（符号位）确定为1。<br><strong> <font color="red">负数的补码</font> </strong>：其反码加1。</p><p><strong>Java整数常量默认是<strong> <font color="red">int类型</font> </strong>，当用二进制定义整数时，其第32位是符号位；<br>当是long类型时，二进制默认占64位，第64位是符号位</strong></p><p><strong>计算机底层都以补码的方式来存储数据！<br>可以只做加法。</strong></p><h2 id="5-运算符"><a href="#5-运算符" class="headerlink" title="5. 运算符"></a>5. 运算符</h2><h3 id="5-1-算数运算符"><a href="#5-1-算数运算符" class="headerlink" title="5.1 算数运算符"></a>5.1 算数运算符</h3><p><strong>取余运算</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">%</span><span class="token operator">:</span>取余运算<span class="token comment">//结果的符号与被模数的符引</span><span class="token keyword">int</span> m1 <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token keyword">int</span> m2 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> m3 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">;</span><span class="token keyword">int</span> m4 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">;</span>m1 <span class="token operator">%</span> m2 <span class="token operator">=</span> <span class="token number">2</span>m1 <span class="token operator">%</span> m2 <span class="token operator">=</span> <span class="token number">2</span><span class="token comment">//不用刻意去记，仔细计算就行 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>自增运算</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">++</span><span class="token operator">:</span>自增<span class="token operator">/</span>自减运算<span class="token comment">//注意区分++ &amp; -- 前后位置带来运算结果的差异</span><span class="token keyword">short</span> s1 <span class="token operator">=</span> <span class="token number">10</span>；s1 <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//会报错！！需要强制类型转换~</span><span class="token comment">//s1 = s1 + 1;</span>s1<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//正确，++不会改变本身变量的数据类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-赋值运算符"><a href="#5-2-赋值运算符" class="headerlink" title="5.2 赋值运算符"></a>5.2 赋值运算符</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">+=</span> 此类的运算符不会改变变量的数据类型。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5-3-比较运算符"><a href="#5-3-比较运算符" class="headerlink" title="5.3 比较运算符"></a>5.3 比较运算符</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">instanceof</span> <span class="token comment">//检查是否是类的对象；</span><span class="token string">"Hello"</span> <span class="token keyword">instanceof</span> <span class="token class-name">String</span> <span class="token operator">&gt;&gt;</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5-4-逻辑运算符"><a href="#5-4-逻辑运算符" class="headerlink" title="5.4 逻辑运算符"></a>5.4 逻辑运算符</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">^</span> <span class="token comment">//异或</span><span class="token operator">&amp;</span> <span class="token operator">&amp;&amp;</span> <span class="token comment">//逻辑与 短路与</span><span class="token operator">|</span> <span class="token operator">||</span> <span class="token comment">//或 短路或</span><span class="token comment">//短路是判断出结果就停止</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-5-位运算符"><a href="#5-5-位运算符" class="headerlink" title="5.5 位运算符"></a>5.5 位运算符</h3><p><strong>操作整型数据，在一定范围类可以实现 x2 /2 的操作</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;&lt;</span> <span class="token comment">//左移 x2</span><span class="token operator">&gt;&gt;</span> <span class="token comment">//右移 /2</span><span class="token operator">&gt;&gt;&gt;</span> <span class="token comment">//无符号右移 </span><span class="token operator">&amp;</span> <span class="token comment">//与运算</span><span class="token operator">|</span> <span class="token comment">//或运算</span><span class="token operator">~</span> <span class="token comment">//取反运算</span><span class="token operator">^</span> <span class="token comment">//异或运算</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-6-三元运算符"><a href="#5-6-三元运算符" class="headerlink" title="5.6 三元运算符"></a>5.6 三元运算符</h3><blockquote><p><strong>如果程序既可以使用三元运算符，又可以使用if-else结构，那么<strong> <font color="red">优先选择三元运算符。原因:简洁、执行效率高。</font> </strong></strong></p></blockquote><h3 id="5-7-运算符优先级"><a href="#5-7-运算符优先级" class="headerlink" title="5.7 运算符优先级"></a>5.7 运算符优先级</h3><p><img src="https://yancey597.github.io/posts/22710/1.jpg"></p><hr><p><strong>永远相信美好的事情即将发生！</strong></p><p><strong>Yancey</strong><br><strong>2021-10-9 0:06:01</strong></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows11</title>
      <link href="/posts/45425.html"/>
      <url>/posts/45425.html</url>
      
        <content type="html"><![CDATA[<h1 id="Windows11-体验分享及升级教程"><a href="#Windows11-体验分享及升级教程" class="headerlink" title="Windows11 体验分享及升级教程"></a>Windows11 体验分享及升级教程</h1><blockquote><p>10月5日，大家期待已久的Win11正式版终于发布了，符合条件的Win10电脑可获得免费升级。</p></blockquote><p><img src="https://yancey597.github.io/posts/45425/cover.jpg#pic_center"></p><h2 id="1-Win11系统最低配置要求"><a href="#1-Win11系统最低配置要求" class="headerlink" title="1. Win11系统最低配置要求"></a>1. Win11系统最低配置要求</h2><p>1、处理器：1 GHz 或更快的支持 64 位的处理器（双核或多核）或系统单芯片 (SoC)<br>2、内存：4 GB RAM<br>3、存储：64 GB 或更大的存储设备<br>4、系统固件：支持 UEFI 安全启动<br>5、TPM：受信任的平台模块 (TPM) 2.0 版本<br>6、显卡：支持 DirectX 12 或更高版本，支持 WDDM 2.0 驱动程序<br>7、显示器：对角线长大于 9 英寸的高清 (720p) 显示屏，每个颜色通道为 8 位<br>8、Internet 连接：Windows 11 家庭版的设置需要具有 Microsoft 帐户和 Internet 连接</p><p><img src="https://yancey597.github.io/posts/45425/2.jpg#pic_center"></p><p><a href="https://www.microsoft.com/zh-cn/windows/windows-11-specifications#table1">点我前往微软官网查看原文</a></p><h2 id="2-Win11有哪些亮点？"><a href="#2-Win11有哪些亮点？" class="headerlink" title="2. Win11有哪些亮点？"></a>2. Win11有哪些亮点？</h2><p>全新的设计语言、全面优化的触控体验、直接运行Android应用以及更强的游戏性能。<br>新系统给我最大的感受是<strong>UI扁平化</strong>带来的视觉上的协调和统一。</p><p><strong>选几个我感兴趣的点讲一讲。</strong></p><p><img src="https://yancey597.github.io/posts/45425/1.jpg#pic_center"></p><h3 id="2-1-UI全面升级"><a href="#2-1-UI全面升级" class="headerlink" title="2.1 UI全面升级"></a>2.1 UI全面升级</h3><h4 id="1）新logo、新壁纸和新图标"><a href="#1）新logo、新壁纸和新图标" class="headerlink" title="1）新logo、新壁纸和新图标"></a>1）新logo、新壁纸和新图标</h4><p><img src="https://yancey597.github.io/posts/45425/logoall.jpg#pic_center"></p><center>历代Windows Logo</center><p><img src="https://yancey597.github.io/posts/45425/newlogo.jpg#pic_center"></p><center>Win11的logo变成了方正的「田」字，爷青结。</center><p><img src="https://yancey597.github.io/posts/45425/desktop.jpg#pic_center"></p><center>部分图标重新绘制，比如回收站、各类文件夹等。</center><h4 id="2）任务栏居中"><a href="#2）任务栏居中" class="headerlink" title="2）任务栏居中"></a>2）任务栏居中</h4><p>Win11将开始菜单和任务栏居中放置，开始菜单取消了磁贴设计，取而代之的是软件库，搜索、任务视图等应用，均采用了卡片的样式，悬浮于任务栏上方。</p><p><img src="https://yancey597.github.io/posts/45425/menu.jpg#pic_center"></p><center>开始菜单样式</center><p><img src="https://yancey597.github.io/posts/45425/renwulan.jpg#pic_center"></p><center>任务栏样式</center><p><img src="https://yancey597.github.io/posts/45425/menusetting.jpg#pic_center"></p><center>可以在任务栏设置中关闭搜索等选项显示</center><p>Win11重新设计了设置面板，分栏式布局取代了之前的菜单选项。可以保证用户在任何时候都能跳转到所需的模块。添加了左侧导航栏、面包屑导航，以便用户深入导航到“设置”以帮助用户了解自己所处的路径。设置页面顶部有新的控件，突出显示关键信息和常用设置，供用户根据需要进行调整。并且，设置面板对具有大量设置的页面添加了可扩展框。</p><p><img src="https://yancey597.github.io/posts/45425/setting.jpg#pic_center"></p><center>设置面板</center><h4 id="3）新的右键菜单"><a href="#3）新的右键菜单" class="headerlink" title="3）新的右键菜单"></a>3）新的右键菜单</h4><p>Win11的桌面右键菜单启用新UI，位置间距更大</p><p><img src="https://yancey597.github.io/posts/45425/right.jpg#pic_center"></p><center>右键菜单</center><h4 id="4）通知中心-操作中心"><a href="#4）通知中心-操作中心" class="headerlink" title="4）通知中心/操作中心"></a>4）通知中心/操作中心</h4><p>Win11的通知中心采用分离式UI，不再与操作中心绑在一起。日历面板提供了折叠功能，可以为通知区域预留更多空间。除了外观上的变化外，新版还为部分面板添加了可操作按钮。比如刚刚更新好的应用，就能直接打开或是固定到开始菜单上。</p><p><img src="https://yancey597.github.io/posts/45425/kongzhi.jpg#pic_center"></p><center>新版控制中心</center><p><img src="https://yancey597.github.io/posts/45425/rili.jpg#pic_center"></p><center>新版日历</center><h3 id="2-2-功能更加实用"><a href="#2-2-功能更加实用" class="headerlink" title="2.2 功能更加实用"></a>2.2 功能更加实用</h3><h4 id="1）虚拟桌面"><a href="#1）虚拟桌面" class="headerlink" title="1）虚拟桌面"></a>1）虚拟桌面</h4><p><strong>这可能是最完美摸鱼神器。</strong><br>Win11完善了虚拟桌面功能，在原有基础上允许各个“桌面”拥有自己的主题、壁纸、名称。新设计调整了桌面工具栏位置，以方便触屏用户快速取用。</p><p><img src="https://yancey597.github.io/posts/45425/xulizhuomian.jpg#pic_center"></p><center>虚拟桌面</center><h4 id="2）新版微软商店"><a href="#2）新版微软商店" class="headerlink" title="2）新版微软商店"></a>2）新版微软商店</h4><p>Win11的应用商店也进行了重整，最直观感受就是界面更漂亮了。除了UWP应用外，新商店提供Win32程序、PWA、.apk 等更多应用格式下载。并且扩充音乐、视频、电影等更多资源。</p><p><img src="https://yancey597.github.io/posts/45425/store.jpg#pic_center"></p><center>新版微软商店</center><h4 id="3）可以直接运行安卓程序-跳票了"><a href="#3）可以直接运行安卓程序-跳票了" class="headerlink" title="3）可以直接运行安卓程序(跳票了)"></a>3）可以直接运行安卓程序(跳票了)</h4><p>Win11内置Android子系统，可直接运行Android应用，用户可以在Microsoft Store中的亚马逊应用商店或其它来源搜索和下载Android应用。Android 应用可以直接运行在Win11上，同时拥有相应的功能体验。</p><p><img src="https://yancey597.github.io/posts/45425/android.jpg#pic_center"></p><center>安卓应用</center><h3 id="2-3-游戏性能优化"><a href="#2-3-游戏性能优化" class="headerlink" title="2.3 游戏性能优化"></a>2.3 游戏性能优化</h3><p>Win11带来了一系列尖端游戏技术，让 PC 的硬件潜力充分释放。</p><p><img src="https://yancey597.github.io/posts/45425/game1.jpg#pic_center"></p><center>游戏设置界面改版</center><h4 id="1）三大技术加持"><a href="#1）三大技术加持" class="headerlink" title="1）三大技术加持"></a>1）三大技术加持</h4><p><strong>DirectX 12 Ultimate技术</strong>，旨在让玩家高帧率模式下，实现更具沉浸感的画面体验。<br><strong>DirectStorage（直通存储）技术</strong>已在Xbox Series S/X应用，游戏可绕过 CPU，直接载入GPU中，从而大大提升加载速度。</p><p><img src="https://yancey597.github.io/posts/45425/game2.jpg#pic_center"></p><center>Auto HDR</center><h4 id="2）内置-XGP"><a href="#2）内置-XGP" class="headerlink" title="2）内置 XGP"></a>2）内置 XGP</h4><p>用户可付费开通<strong>Xbox Games Pass</strong>游戏订阅服务，直接从PC端访问Xbox的游戏库。目前Xbox商店里已有上百款精选3A大作，这对热爱游戏的玩家来说，的确令人心动。</p><p><img src="https://yancey597.github.io/posts/45425/xbox.jpg#pic_center"></p><center>XBox &amp; Win11</center><h2 id="3-影响体验的地方"><a href="#3-影响体验的地方" class="headerlink" title="3. 影响体验的地方"></a>3. 影响体验的地方</h2><p><strong>AMD和微软</strong> 在近日都已经宣承认，由于Windows 11的两个兼容性问题，会导致相应的AMD处理器在使用Windows 11的时候，出现性能不同程度下滑的现象。目前来看，这个问题只会出现在锐龙处理器上。当然如果不是锐龙处理器的话，也不在微软Windows 11支持的处理器产品中，出现什么问题微软和AMD也不会负责。</p><p><img src="https://yancey597.github.io/posts/45425/amd.jpg#pic_center"></p><center>AMD</center><h4 id="1）新通知不明显"><a href="#1）新通知不明显" class="headerlink" title="1）新通知不明显"></a>1）新通知不明显</h4><p>诸如微信、QQ一类的通讯软件，收到消息后不会像过去一样以整个高亮颜色提醒，只有一个不太明显的颜色变化，容易漏看信息；</p><p><img src="https://yancey597.github.io/posts/45425/qq.jpg#pic_center"></p><center>QQ</center><h4 id="2）右键菜单折叠"><a href="#2）右键菜单折叠" class="headerlink" title="2）右键菜单折叠"></a>2）右键菜单折叠</h4><p>不仅套娃，现阶段使用右键菜单弹出有2s左右延迟，严重影响体验(可能是现象级Bug)。<br><img src="https://yancey597.github.io/posts/45425/right1.jpg#pic_center"></p><center>延迟弹出</center><h4 id="3）日常打开文件目录卡顿"><a href="#3）日常打开文件目录卡顿" class="headerlink" title="3）日常打开文件目录卡顿"></a>3）日常打开文件目录卡顿</h4><p>打开文件目录经常卡顿延迟，明显感受的到不流畅</p><p><img src="https://yancey597.github.io/posts/45425/file.jpg#pic_center"></p><center>文件目录卡顿</center><h4 id="4）任务栏奇大无比"><a href="#4）任务栏奇大无比" class="headerlink" title="4）任务栏奇大无比"></a>4）任务栏奇大无比</h4><p>上次看见这么大的下把还是在隔壁友商移动设备上。</p><p><img src="https://yancey597.github.io/posts/45425/xiaomi.jpg#pic_center"></p><center>某友商设备</center><h2 id="4-如何升级Win11"><a href="#4-如何升级Win11" class="headerlink" title="4. 如何升级Win11"></a>4. 如何升级Win11</h2><h3 id="1-通过微软推送更新，从”Windows更新”升级"><a href="#1-通过微软推送更新，从”Windows更新”升级" class="headerlink" title="1. 通过微软推送更新，从”Windows更新”升级"></a>1. 通过微软推送更新，从”Windows更新”升级</h3><p>在Windows 11升级推送期间，微软将进行一些后台测试和对特定电脑进行验证。Windows 更新将向用户指出其电脑是否符合升级条件以及何时可以升级。同时，用户可以进入“设置”/“Windows更新”中进行查看。打开该界面之后，就已经看到支持升级到Windows 11的提示。</p><p><img src="https://yancey597.github.io/posts/45425/sj1.jpg#pic_center"></p><center>Windows更新</center><h3 id="2-手动升级"><a href="#2-手动升级" class="headerlink" title="2. 手动升级"></a>2. 手动升级</h3><h4 id="1）下载安装微软官方“电脑健康状况检查”应用"><a href="#1）下载安装微软官方“电脑健康状况检查”应用" class="headerlink" title="1）下载安装微软官方“电脑健康状况检查”应用"></a>1）下载安装微软官方“电脑健康状况检查”应用</h4><p><img src="https://yancey597.github.io/posts/45425/sj2.jpg#pic_center"></p><center>电脑健康状况检查</center><p><a href="https://aka.ms/GetPCHealthCheckApp">官网下载</a><br><a href="http://t.cn/A6MJkv8p">网盘打包下载:提取码 win1</a></p><h4 id="2）下载安装微软官方“Win11-升级助手”应用"><a href="#2）下载安装微软官方“Win11-升级助手”应用" class="headerlink" title="2）下载安装微软官方“Win11 升级助手”应用"></a>2）下载安装微软官方“Win11 升级助手”应用</h4><p><img src="https://yancey597.github.io/posts/45425/sj3.jpg#pic_center"></p><center>Win11 升级助手</center><p><img src="https://yancey597.github.io/posts/45425/az1.jpg#pic_center"></p><center>等待安装完成即可</center><h4 id="3）Enjoy-it"><a href="#3）Enjoy-it" class="headerlink" title="3）Enjoy it"></a>3）Enjoy it</h4><p><img src="https://yancey597.github.io/posts/45425/win11.jpg#pic_center"></p><center>Windows11</center><hr><p><strong>永远相信美好的事情即将发生！</strong></p><p><strong>Yancey</strong><br><strong>2021-10-8 0:53:01</strong></p>]]></content>
      
      
      <categories>
          
          <category> 资讯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java语言概述</title>
      <link href="/posts/25287.html"/>
      <url>/posts/25287.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java语言概述"><a href="#Java语言概述" class="headerlink" title="Java语言概述"></a>Java语言概述</h1><blockquote><p>Hello Java.</p></blockquote><h2 id="一、Java语言概述"><a href="#一、Java语言概述" class="headerlink" title="一、Java语言概述"></a>一、Java语言概述</h2><h3 id="1-基础的DOS命令"><a href="#1-基础的DOS命令" class="headerlink" title="1. 基础的DOS命令"></a>1. 基础的DOS命令</h3><pre class="line-numbers language-none"><code class="language-none">dir:    列出当前目录下的文件及文件夹md:   创建目录 make dictionary **rd:     删除目录**cd:     进入指定目录cd..:   退回到上一级目录cd\:   退回到根目录**del:   删除文件 针对目录的话是删除目录下的所有文件**del *.txt :删除所有类型为txt的文件exit:   退出命令行echo name: Tom,age:12&gt;1.doc 创建1.doc 并把内容放置进去<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-Java特性"><a href="#2-Java特性" class="headerlink" title="2. Java特性"></a>2. Java特性</h3><h4 id="2-1-面向对象"><a href="#2-1-面向对象" class="headerlink" title="2.1 面向对象"></a>2.1 面向对象</h4><p><strong>两个概念：</strong> <font color="red">类、对象</font></p><p><strong>三大特征：</strong> <font color="red">封装、继承、多态</font></p><h4 id="2-2-健壮性"><a href="#2-2-健壮性" class="headerlink" title="2.2 健壮性"></a>2.2 健壮性</h4><p>去掉指针等、提供了<font color="red"><strong>相对安全的内存管理访问机制</strong></font></p><h4 id="2-3-跨平台性"><a href="#2-3-跨平台性" class="headerlink" title="2.3 跨平台性"></a>2.3 跨平台性</h4><p>因为**JVM(Java虚拟机)**的存在，所以在不同的系统平台都可以运行。</p><p><font color="red"><strong>Write once ,Run Anywhere.</strong> </font></p><h4 id="2-4-核心机制"><a href="#2-4-核心机制" class="headerlink" title="2.4 核心机制"></a><strong>2.4 核心机制</strong></h4><p><strong>JVM：</strong><br><strong>一个虚拟的计算机</strong>，拥有指令集并使用不同的存储区域，负责执行指令，管理数据、内存、寄存器。<br><img src="https://yancey597.github.io/javayuyangaishu/JVM.jpg#pic_center"></p><p><strong>垃圾回收机制：</strong><br>在C/C++等语言，由程序员回收内存。<br>在Java中由程序自行控制，**<font color="red">但还是会有内存泄露、溢出。</font>**</p><h3 id="3-Java环境搭建"><a href="#3-Java环境搭建" class="headerlink" title="3. Java环境搭建"></a>3. Java环境搭建</h3><h4 id="3-1-Java环境有哪些"><a href="#3-1-Java环境有哪些" class="headerlink" title="3.1 Java环境有哪些"></a>3.1 Java环境有哪些</h4><p><strong>JDK：</strong>Java开发工具包<br>包括JRE、开发工具集（编译Javac.exe，打包jar.exe）。</p><p><strong>JRE：</strong>Java运行环境<br>包括JVM和Java需要的核心类库。<br><img src="https://yancey597.github.io/javayuyangaishu/JDK.jpg#pic_center"></p><h4 id="3-2-配置环境变量"><a href="#3-2-配置环境变量" class="headerlink" title="3.2 配置环境变量"></a>3.2 配置环境变量</h4><blockquote><p><strong>为什么要配置环境变量？</strong></p></blockquote><p>**PATH 环境变量:**是Windows系统执行命令时的搜索路径。<br><strong>配置的原因：</strong> 希望Java开发指令在任何的文件路径下都可以执行。</p><h4 id="3-3-配置方法"><a href="#3-3-配置方法" class="headerlink" title="3.3 配置方法"></a>3.3 <strong>配置方法</strong></h4><p><strong>计算机属性 —&gt; 高级设置 —&gt;环境变量</strong></p><pre class="line-numbers language-none"><code class="language-none">JAVA_HOME = JDK\bin的上一层目录   （添加为系统变量）PATH = %JAVA_HOME%\bin        （添加为用户变量）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-开发体验-HelloWorld"><a href="#4-开发体验-HelloWorld" class="headerlink" title="4. 开发体验 HelloWorld"></a>4. 开发体验 HelloWorld</h3><h4 id="4-1-步骤"><a href="#4-1-步骤" class="headerlink" title="4.1 步骤"></a>4.1 步骤</h4><ol><li>将Java代码<strong>编写</strong>到扩展名为.java的文件中。<font color="red">（源文件）</font></li><li>通过javac.exe对源文件进行<strong>编译</strong>生成class文件。<font color="red">（字节码文件）</font></li><li>通过java.exe对class文件进行<strong>运行</strong>。<br><img src="https://yancey597.github.io/javayuyangaishu/bianyi.jpg#pic_center"></li></ol><h3 id="5-注释"><a href="#5-注释" class="headerlink" title="5. 注释"></a>5. 注释</h3><p><strong>单行注释、多行注释、文档注释</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**文档注释@author yancey@version 1.0这是我的第一个Java程序。*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-Java-API"><a href="#6-Java-API" class="headerlink" title="6 Java API"></a>6 Java API</h3><p><strong>API：</strong>应用程序编程接口</p><p>JavaAPI文档：告诉开发者如何使用这些类，以及这些类里包含的方法。</p><h3 id="7-HelloWorld的总结"><a href="#7-HelloWorld的总结" class="headerlink" title="7. HelloWorld的总结"></a>7. HelloWorld的总结</h3><h4 id="6-1-public类必须和文件名相同"><a href="#6-1-public类必须和文件名相同" class="headerlink" title="6.1 public类必须和文件名相同"></a>6.1 public类必须和文件名相同</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//Hello.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//java里面可以有多个类，但只能有一个声明为public</span><span class="token comment">//public只能加到和文件名相同的类中</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-2-对输出语句的理解"><a href="#6-2-对输出语句的理解" class="headerlink" title="6.2 对输出语句的理解"></a>6.2 对输出语句的理解</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//ln输出默认带换行符</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//对比参照，此输出结果不带换行符</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><strong>永远相信美好的事情即将发生！</strong></p><p><strong>Yancey</strong><br><strong>2021-10-6 13:36:01</strong></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>国庆假后第一天</title>
      <link href="/posts/14906.html"/>
      <url>/posts/14906.html</url>
      
        <content type="html"><![CDATA[<h1 id="国庆假后第一天"><a href="#国庆假后第一天" class="headerlink" title="国庆假后第一天"></a>国庆假后第一天</h1><h2 id="一-不想早读的一天"><a href="#一-不想早读的一天" class="headerlink" title="一. 不想早读的一天"></a>一. 不想早读的一天</h2><p> 苦逼大学生，XX东湖，国庆只放三天假。昨晚写博客到三点，今天早上还要去早读。害，睡醒整个人都是懵的，然后身体又不舒服，果断给燕姐请假不去早读。我的内心只有一个想法，只要不离开床，让我干啥都行。<br><img src="https://yancey597.github.io/posts/14906/suijiao.jpg#pic_center" width="150"></p><h2 id="二-数据结构课上那点事儿"><a href="#二-数据结构课上那点事儿" class="headerlink" title="二. 数据结构课上那点事儿"></a>二. 数据结构课上那点事儿</h2><p> 依旧是没吃早饭的一天，第二次睡醒后匆匆忙忙洗漱便匆匆忙忙骑着车去上课了，今天就一节《数据结构》的课，老师说院里不给调课，要院长同意什么乱七八糟的，不然今天应该也是休息日，淦。上课的内容无非也就是栈和队列，我很早之前就学了这个；但老师中途和我们互动的时候问了一个巨简单的问题，当时没怎么认真听就忙着回答了，场面一度非常尴尬，还被隔壁的李姓同学恶心了一下。<br><img src="https://yancey597.github.io/posts/14906/kaixinya.jpg#pic_center" width="150"></p><p>放之前我肯定会无语一阵，但今天还好，很快就调整过来了。可能是当时我的脸色不是很好，中途一哲Bro来关心我(当时我已经没事了)，但他还是担心我的状态，他说了一句让我印象很深的话。</p><blockquote><p>人总要有点善意的保留，但如果当保留成为解决问题的阻碍的时候，就不能保留了需要倾诉。</p></blockquote><p> 哈哈哈，突然意识到之前的一些行为是多么的愚蠢。</p><h2 id="三-不能点校外卖的第一天"><a href="#三-不能点校外卖的第一天" class="headerlink" title="三. 不能点校外卖的第一天"></a>三. 不能点校外卖的第一天</h2><p> 本来以为会对我的生活造成很大影响，但实际并没有！今天中午发现了学校居然有一家挺好吃的煲仔饭，分量足味道也相当nice，有青菜真的是非常健康了。吃着鱼香肉丝煲仔饭，一直觉得味道很熟悉，想半天终于回忆起来了：这个味道特别像我八月底骑行过程中在南漳县吃的“香他她煲仔饭”！哈哈哈，又短暂的陷入了回忆。今天晚上又点了这家店的煲仔饭，爱了爱了。<br><img src="https://yancey597.github.io/posts/14906/fan.jpg#pic_center" width="150"><br> 生活中很多事也是这样的，人总是把目光投向很远的地方，但忽视身边美好的一些事。哈哈哈，小学二年级都学过的内容：世界上不缺少美，只缺少发现美的眼睛。</p><h2 id="四-日常相信星座"><a href="#四-日常相信星座" class="headerlink" title="四. 日常相信星座"></a>四. 日常相信星座</h2><p> 老是被<a href="https://weibo.com/u/7485768329">@白桃星座</a>的星座运势预判，我不太理解了，真的就几乎一模一样。<br> 最近有在认真思考自己到底想要的是什么及后续发展方向。在最近经历了一些事后，对自己又有了新的认识，前两天也确实遇到了超级聊的来的新朋友。最后一句话挺真实，别看轻自己，能量巨大。<br><a href="https://weibo.com/7485768329/KB3ZCy29H">微博原文</a><br><img src="https://yancey597.github.io/posts/14906/suipin.jpg#pic_center" width="150"></p><hr><p><strong>永远相信美好的事情即将发生！</strong><br><strong>晚安</strong></p><p><strong>Yancey</strong><br><strong>2021-10-4 23:54:01</strong></p>]]></content>
      
      
      <categories>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/16107.html"/>
      <url>/posts/16107.html</url>
      
        <content type="html"><![CDATA[<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World!"></a>Hello World!</h1><blockquote><p>下午和朋友聊天时不经意想起已经鸽了很久很久的博客。说干就干，从下午两点开始一点点学习HEXO搭建，到最终这个博客成品的完成。 特别感谢一哲bro的帮助，让我在整个过程中轻松不少(当然也很痛苦，一个小地方改一晚上)。  </p></blockquote><h2 id="一-博客的用处"><a href="#一-博客的用处" class="headerlink" title="一.  博客的用处"></a>一.  博客的用处</h2><h3 id="1-记录心情"><a href="#1-记录心情" class="headerlink" title="1. 记录心情"></a>1. 记录心情</h3><p> 最近心情不是很好，但除了微博知乎也没啥好记录的地方，空间朋友圈朋友同事太多，天天搁着发显得矫情，但有时候难受的时候确实需要一个能够记录心情的地方。</p><h3 id="2-分享学习经验"><a href="#2-分享学习经验" class="headerlink" title="2. 分享学习经验"></a>2. 分享学习经验</h3><p> 以后会在这里分享在生活中以及编程中的一些经验，作为日常学习的记录。</p><h2 id="二-今日日常"><a href="#二-今日日常" class="headerlink" title="二. 今日日常"></a>二. 今日日常</h2><h3 id="1-学习日常"><a href="#1-学习日常" class="headerlink" title="1. 学习日常"></a>1. 学习日常</h3><p>  今天主要针对HEXO+Github 部署博客有了充足的练习并产生了新的认识，练习使用了前端开发中的属性修改等。</p><p>不得不提一句，HEXO真tm让人无语</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token constant">HEXO</span> clean<span class="token constant">HEXO</span> g<span class="token constant">HEXO</span> s<span class="token comment">/*HEXO这个缓存机制真的有毒唉，偶尔不能实时生效，需要不断的重复上述操作*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://yancey597.github.io/posts/16107/blog.jpg#pic_center"></p><h3 id="2-生活日常"><a href="#2-生活日常" class="headerlink" title="2. 生活日常"></a>2. 生活日常</h3><p>  隔壁宿舍的朋友放完国庆回来看到我再Coding，就告诉我说，哇，看来熟悉的小卢又回来了！</p><p>  回来了吗？其实没有，我发现主要让自己忙起来就能克制消极情绪，不去想一些事情。前几天一到下午，整个人都没有精神，太难受了。</p><p>  我没有把她送我的东西清空，反而摆在了最显眼的位置：看到自行车上的小猪、看到桌子上迪迦，还是忍不住想她。但我短时间不会去打扰她了，也没有再去她的微博或者是其他平台了解她的生活。尽管我很担心她，但我现在的身份的确不应该去关心，我相信她的朋友是可以照顾好她的。</p><p>  我爱死星茶会这首歌了，害，真的给了我很大力量，所以我也把它设置为了我的博客BGM。<br><img src="https://yancey597.github.io/posts/16107/xch.jpg#pic_center"><br>  时间已经很晚了，今天就先写这么多吧，明天见！</p><p><img src="https://yancey597.github.io/posts/16107/wanan.jpg#pic_center"></p><hr><p><strong>永远相信美好的事情即将发生！</strong><br><strong>晚安</strong></p><p><strong>Yancey</strong><br><strong>2021-10-4 01:54:01</strong></p>]]></content>
      
      
      <categories>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
